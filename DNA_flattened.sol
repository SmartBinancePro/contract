// SPDX-License-Identifier: Unlicensed
pragma solidity >=0.4.22 <0.9.0;

contract M13{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0xb46e445AB86e588FCDCAf3172162507494F5Ed85,
0x95F1DDe61342A774d3d9B33Be11958fE690a41e2,
0xef240009F91d3d1Ee877d579C0FB1be31C3aA8A7,
0x99095aAC455f019247d4339CF4091769f43E6394,
0x7e3CD0E9Cc311BbCFB13Cb7DC6D9131e790eCD3B,
0x838F8a48badA228308a08CB06C7A00377Cd5b939,
0xB53C3F044E97882f56532B841F68B69cFd4991DE,
0x16C654994F586FD86759cB63692Ce8cC94343f4D,
0x1f43ADbC9ddfF2746566c9EC54c1f379D95B68ae,
0x9AD47aBbe1C9eFA3C11Ee83ae7bAbad23306D09D,
0x692D9f42C99f1b88d0A6023A4f048f52005771A6,
0xa279DFabA20025f0E691E41CE15414BDA0Ab94Ac,
0xB7a4057AE675261851492F19fbE58a8E914FDd8B,
0x5b34a6A54F91e2A7022Fd9daC264Ab3bb378590f,
0x7bE70860e62e7fE9510CEf14DD75A5Ae63a381ac,
0x134fDA3388dBa2a3145f202911C25d9c57742f71,
0x346Fc90DF8E34E5aB7e9782681F44C74132B48F4,
0x2F66f12FEf3a6e20be6B39E7Ac3cBFeb0664947e,
0x2aa8cB8BBFae4069335Abe623A546dC19977160b,
0x11d969Eb13C5a0aC78fffa63490A635921b01739,
0x04974fE7Da9B8a28a048Ec1a53De2CE997f0F9c8,
0x37dBc850ce6aB0Bb4d593d9F9eE5FA3E1C537fC6,
0x0719F8E6378A1e632250E7469C7c028F128742eC,
0x1E8f6A2A305ba94bcdaa512d7F72Ae537f4B5fBA,
0xbFdF0aCE142E9238c420f8a0DbBCA8FD83Be73aA,
0x2A1216480b87A594fA9204B99021650e4c2493d2,
0x631917c03e75c4c0581fc753C7720f0BcdB2fFbd,
0x97e7dDC442368C8C318caDA749A6aA20D6f43597,
0x532A59B108E75AC4Dc830802f7B234528BB9fb2d,
0x717DFb55408D8b84dbEa64FbbA2d4b22b997180A,
0xd871FD43454411E321284496c8335F34F2DB670F,
0x944eEac8bD800CeE68cce458Cb31B58b383b92f3,
0x2BCF4cd5eb602385165a27B58cac237994F067Dd,
0x21Ba695059C2B5F1bE0EDa16C3918359A99D55Af,
0x601F2D9Ce23c79a356728e5Efd2809FD754c6cfc,
0x8143ab063Ea457fb14a702F0432A5262533b8267,
0x49Cb8162b738CC0D9D4C0F1184D5f794816D3690,
0x9a6deb93609A186a33A1a72a8c77Cf40f03b8b65,
0x9bf040D74490a419a79146cAD3986ea336619806,
0x530D251a8Da6c85b303a27fAF0c576BE89Ebc05a,
0x008CeC6B9c5138D7709c55531E5e63c1FB679F56,
0x19Ca763eB85455ED662b975da2c81D67766C7255,
0x20437dEB74b0A8D37E466228bfF925e2915e3793,
0x6bf9A5859B717B56721120213bA4Acf648aB433C,
0x4d3F9b0d261073056fA5062B12A7a0B1a389223A,
0x3D67AeDd00984b31A1023B9df18530297D9FA582,
0xF26Bee80954d6A9F624De51e3D44192FD9aA31E8,
0xeE4c89B4Eb53151c915AE141fd56E64769D38B1A,
0x1cBa50CB39f2b4502882a6d7744341A0F56648aD,
0x88635f28647Eca02a04a2d57C6E600b97F475077,
0x525AAeFdFE19cEfF1b8aEDb797877cd4DC213A3E,
0x5Fd31DA3aCcdEA9e02c69f5d45d2dC559242fC2e,
0x504C7f5F899a82943836b1F48693583c2Afb0260,
0x706baD8cE000A4D78BDd36a8FD6be8Bc7B16f777,
0x8E1DE9e68884647aD599D3f9dFa98D23E4707803,
0xEbA6A85796c7d23108423a26645DC03f2919D4be,
0x58F23d9363b285A716ED50F3fD08876546e720dc,
0x3F0cb7c1E371fcb3A890cf37e066FF0B04C0B542,
0x7A4Cf3C8B95b568E1cd1C1d9769931C1c134c9A0,
0x67A220AD87827f6d1240B0cb7c7F54F098FEE2d4,
0x74Becf14cEa4F8Ba0833cfaF00D369f663e5bA8e,
0x8B574583Fea1a772D5CfAea3d16C919226CEB27E,
0xa4642a226bb7d5a9637BB1021941b08890a8C059,
0x76d208957C9f6cFCC1E29A2C1126c0389ec927Bb,
0x20a627bcfCA6501c865DAAa2e0A60C5625293270,
0x641E3C8bA0A4a47232b6F5237b17b4Acb94A61d2,
0xfB3ADb2Fc6F30C5372d533c9C9B8C5dDdcA8c78f,
0x78b3b82498f4813C40B272c56a83119C61BaB4C6,
0xfdB4eC19EE966aCeb1Bd50c74F1C6b66185E22bC,
0x04a74aB3e087e12DA13DeA83784B7ab75503418f,
0x5a13Cb7EE2BC243a0b4714b358AB936797139D42,
0x3eC8ACb3D399Bf7fF99EE32E708F4af38ABa0aD0,
0x9750495274B40800e3dB8Ea53a83ea92708FA856,
0x7848839d1ADAF9fa2de7345f3bb2D3fe62fb455e,
0x42b045252695371e3D4820d2D96938D608F20195,
0x26A4012e4f0537aC763575c0e033e520DC74B289,
0xa5f6271DbA3ce4aAA2F1A1Bc97A5f1627817E8C3,
0xcb1B1790013CB0148Abaa98EB81b3e99B10d0366,
0x707Afc62f5A60400d6157ed27D4F171009978723,
0x3dc9EbF999818808f78651406C92D487beE7d21D,
0x577ba2df87AEE130A80B5264a9f8E07995D86271,
0x2B1fb4cf4a3CD382174d4AeD23A33D86F4321E22,
0xa43988fE9E1bF4D091E9F50De139c16f75129DB5,
0xc7C10099Fb8B132B110A904E8f3A2F974FE94baE,
0x9C4930db0EAEF02cBD301c89748A8292065028F9,
0x9CA1B8c87ee7a9fBd1C1D1c7664BC1512B6113EB,
0xD7Cb2e9b688c3552F3BC32Fb3a1Ba1502bF594F1,
0x8bFDD9b136E8493dc6956Ab844394E4A6EC18b11,
0xDBC8c8ef540b511a975729559187a52B94386d00,
0xaDbfB597fcbD7E0521A70EA9b4CbEc8fB232EABb,
0xC3192F745e19B76F61D51a2001F4431FdE94eC6d,
0x3dc2EbCdFe9381eA75d101BB4cD87E4F87F2aBe2,
0xe6cB51b0feF240358cFE639eB7955144C2194fF8,
0xcA12CFAC17fDdf7e736bA4307D0380f280f26cfB,
0x47494254d116f3b9F022C0F867f27D042bbc7704,
0x35D50dA03A64642D1c7A07b411b654DA30dBBd19,
0x90253256dddC4De73C36998B0f0e756203014Eaf,
0x418338439b11DE41e931Da7c9BD4D3A00072b960,
0xC392A8CDc85bdB2E405586e15DaBE95eE3f36923,
0xa011A305ceCA0E181d4e01484768D356fc98b025,
0xb3fBda70adbC7302E11372219f7Dbb29C1e44b24,
0x07BbF20B2D49BBFA4162e951780D95D321887a9f,
0xB4c3A13B1438a1F088C8037047bc2d64e5177cC1,
0x0c6Ae2a70F7951b4975CC15A35930EC333C6EB3a,
0xe82a9ba8fB46483f330048CDfA460B4add544109,
0x823d3671F421908E1B6328A8b07645299949e361,
0x6523429a3Bd7b81517D0077CCA79cFC89F070cA5,
0x75832a63aB39C553bA81d3e7e019e38B87120193,
0xd0a4AA7f3114d80F56768b397F689E202A3bC40B,
0x37Cb7Cd06fF52381B38AC7526F03D22eF8c590E2,
0xBdb9C60DaF43EE1ce5306F3176F05346B4496B22,
0x26a37b2D0CE5121417952FAA76C535A9693971C8,
0xF91F02319a2dca437238f8dad089F12189053CB4,
0x8cd131e4943d7A678aB7Ac58694E9142d16B8B7c,
0x2A33ba963e5861aC25A5041369eD67B315Ab609D,
0x649162234f94fBB3d2B347cb165E1c4dC30E44b5,
0x3d80c6586eB27679Fc5D88Ddf7A260685D89Cc68,
0x2279C8abAa5F033156B589831b19137a61d09c30,
0x24984690804203fc142B66AE460b7d9a8f7fb188,
0xc044E2bC3c5027032A558B0F52Bec2684425E397,
0xEE1789704E1FEa582e5013ca8c80fDF63d4758b2,
0xc433A15cd38DaaC799C2A4de56650356CaD541a7,
0xf8f9Babd58060AE1c6177763a9911Bf83F514fDa,
0xAb6388305FE9E0C8578631A30D3984DB9445DDEf,
0x4EEC13ADAc701258c11Ee23FD27ac68525c829C9,
0x9B492c536d990305322e9791371af8C218c62A45,
0xF16C2264efD745F227de92389446f4Ea9168eF86,
0xE025A4131e27D76F740402449E1aC3E3961F8b36,
0xd8965153F2A28817958F065246aF6fcee20E40B5,
0xb0Eb8A24ec3FE2293Dfa878734f8Ba6102f83f18,
0x27B8083160B293727A9C801a0aA065682969EE0B,
0xd60CD95BDb3CDbF815b929631d985BBd0F0a429a,
0xAA5b202E9e07a2748763DA135CbD75373C7bfaDa,
0x77a87BC813231595ccD3750A4Cb930De3a7977F4,
0x17Df00E1F7B45B39b7B07c237388D1B41078c455,
0x10633af62E8Bc73dE0Dece6B10378A4F9C1AD87E,
0x152D75c7856e2798E3b530a0EDD429C8294dE63A,
0x088497279181F024827269EB2B4dC6dF4a78Fa9a,
0x73Eb55e3F20a3B5eb1b4bB6b5285776B2cD4553C,
0x9739a7d246F4fBA1578AF164Da6e00f6fA34201E,
0x01B1779cB2Bda15E95b7b1DbF102d3587C2Fa5fF,
0x1aa7Ac45f41C62a24930b441753d61CB91122e96,
0xD794F76669d9D67b68410e91655664DA7F551f08,
0x8D92c8598C928B609Bab4B895fE9C44a766A59B6,
0xcFAB916FFebBF89464aAF7530fBAD619F8C6274d,
0x8880bdb4bE3600581f001D9e50d492C3914Cb5e4,
0x6b1322f839704250a33b40a4d1561EE64c049B90,
0x78A17aAFf523Ad5d88A1543F49A461A0DdF73D5e,
0xd56b34d757285E482B7F98D5bd898e36fe129cB2,
0x998E60920C9db46A2c25737aaB9A6781A8f5DCcD,
0x530b5532B4bc5338990D9e49344b11313Eb5b558,
0x55b1B3a15E1805D7583eC3538f82970B950DAf7A,
0xF447b710CA9e1cF6122E1738f935F31A39DaaC72,
0x3BA8350CDcFb57042b79d67b8B6878ba544f8408,
0xA9cB36b439BCed073aEd597597137122eD38D376,
0x82E27c6E423295291FDBd468143B405E50A37561,
0x43dE63De189B4E7D5e705339d0adC480659Ec771,
0x3Ea27bF306c0C61e9c5668472859d9bb2766F00D,
0xA279A0a4D7F3EE27eDC5b7746aFD6BA3446eC70f,
0x249b0747b6EfA97C6504540F5ca6079c17aD2568,
0x4008F0cE36624de3B22908D901c5F02D15f66422,
0xB04a9B353bde1BfA4892653d634B79eC69f34282,
0x24d3233183B93DFB32ceBeEf0cD7C7696f02F9a8,
0x48fCb54c2CB92D2b19D7b643844416181E628568,
0xA5556eC8baa587896eF350BC47ae22E29b0604F9,
0x7Ab02140a36aAd22243038C3CbADf01508E4d606,
0x6D4c5126D5fb51A52732E7181e2AC5A6c7F50C12,
0x9d8A9cCB7E195F5f7976E8BDaaB14B6E3FcBFe67,
0x71Da587CB38CbdF6b5745C3D5906252faC434aa4,
0x86d85163c5EE85f58Ee9eE4653939335b5794a03,
0x78BB0b0F8A06f3594F6DD6C957328D5BD6feE420,
0xF3A42f0130BA8457232914F06C5a86E5F474b8C3,
0x54564619ffFB26D179c0da7c0E963aB408965A9c,
0xd63A795493d7Ac4E11bdE6832D090F2FdeC8A478,
0x5E6867E024e2325a15668D73abE06bCD86905D47,
0x6A40e4890B7ec499211B949da180acd37c4Ca833,
0x12f3A9a7489049c525EDa1A783701fa2D0fa65a5,
0xB789B83789775f8AF606a95A000c69Fc96B85337,
0x575B94D0efFbEA1bB67e30D161Af441db5502F93,
0x3F82dDc39Ee96180b6B580087f286Cbf488948c2,
0x391c4A2510CEfd8d3a3dF907aC51a224F6577194,
0x3A7dF78B0C11Bae8593DB7F09BC94f68A7DCd22d,
0xe0Ce50558492eDE4CACC478F7B9326DA230a3524,
0x5659BBcB0F5C81f04c3f265037b24E64150D2b9A,
0x41CDd9B3A28186C9F37C1f05BFAb5f24c4ab7eE3,
0x8fE72b3E1D2464b55f8eBCD91219E67753A10F50,
0x5b64b96115B178f2ecBEaC3715F0C58A8723461d,
0xe7737976B5F4742f2aEB7718a35877d0De00caD4,
0x79f5456A01496608fbA66616FefD836C440cD163,
0x8b57e15c17861f561740F4f5D98a0E63f169a209,
0x534Ce561fBf5e2321DB01ee26731C58C574E1c05,
0x8361D6C3f6e513A8Ac3Bc9e4688ef20c1590335D,
0x108618d0a237Fc1b92509CAd96efA8C7fA4Da9be,
0xbb3bDE7117E4784D96084e950241d5681360fa17,
0x4844274bf7cF8d74402d499EE4B43d3918f12f66,
0x27f7c5646D02CD2Cc8fA21Db9DAce4ab80E74E90,
0x071c91FDc78875728aCb2b59c787e7d33fA190dd,
0xa763c308080D6D6DA284632188147Ba4D488e1f8,
0x1a86c19a7AB53a2d404551008C840639738BbFc7,
0x342B4F41D84235fF0EccA3b3d97Bed8C8a44F80A,
0x2e2FfB98A7Bf4cfcBa4edd0CFf67d68F9A664296,
0x183cbb835609d818fD76c7cD6fDbC71AE33502F8,
0x5e0E592fac20EaA7bc5c669fc24B68282089839f,
0x98784B79151CbAb7646e28b6e80248a0a5CCf7d7,
0xe0fa907192A872c9A175278495ad5E67adc93ACc,
0xeCD0ef46EDbe8C98cbFE4bA31a34B801b637934b,
0x72544eC92Ed8116E08F38AAAeA0b402F5FBEA90a,
0xDfdd6dc89D233f278785F660e5266D2397C693C4,
0x0Dc10Dd610877cA41264262bFa8Cac991Fd98390,
0xc1611E19caBAf11C16d20A54aE796f452C63e866,
0xF4CC5601C36193e35fC4E3808D1206Ec2a5B1816,
0x798E4dBBf1f018c01ee2763DD15bE6e0e17F9346,
0xF141665E75AF62b09E6568d1Fb0FA12292Ecc5a7,
0x0de428E9710e1dCB7c3B0c46F320c108c010437F,
0x84cFbd2AD74b4B31EeA6312233368620Ca87aAD0,
0xE16f36A17cEbd828E69f74809E7Da4989883824D,
0x712Bc7e64f563F524Cf9e3EceeCbB876B0e281D9,
0xd2a7A990E472f41afbc1Eef0125231dD2663f95D,
0xeB75b4e66943cB9D4745B19194f5bC603C6758A6,
0x872953Ca55286D1633695D8ADaE5a9d2faC0CF7E,
0x0872667C713a548A46249949bECC4CC79776bEfD,
0x7d2F9cab1F2AB864197B6DF22c7a7f0DEC32764F,
0x4D81aC5F721049650EeD61fA1b6200BCF7BB2F9D,
0xb14167ad9251cb803cb492c93099153bBdDa274d,
0x6b857054e106810f26aD6285F586CBDe75bCa363,
0x002e4D18D3e61C47Af064F0e1BAcE79a43ef97E0,
0x3e940d147eAb258580204EA01eAa20229211B2A6,
0xE13a771Db548d688373D53e1a9951C8947e10394,
0xC7276B78Ba78eDf2786c8bc7577c2D14257b0D7C,
0x56EeB90211a860BcE9a44E4074d7fDE845B6bDB0,
0x914749C605C7e24B871eb06A3b621d6FECbcc8D9,
0xaab0A25B7161145303Bd603B2972F288742e3942,
0xd800bEfaa1E2fcBEBa04882e7B4a5aEf0C4531d5,
0xFC73Ff1773CB20Af5D1A5176B87cf28F872376ef,
0x6662C1D5Ab188622Ce84D3BDA57ecc6226236BBd,
0xFf5F7056051eD3d928a58c97054f3d5DF462DBFA,
0xc0F0059FfE628AeCA9cc0982ff6a138e25839B67,
0x4714BecEBCab513dA4DE88e61F1E08BAB2de9cEe,
0xAe9D7Db03cE89db3c5C21a88814B27C38c4617CB,
0x8DD91fb2f02Da0297051d3D3cbc1448E50D5359C,
0xbDcE319aD46e26766013E67D23170853Dc604da1,
0x341880F9182C0B597Df80733Ed33bC57348DB39A,
0x0B42de7995821A53767C1bf22A9B7C937dFc2E23,
0xee5a94F8F184781D0636b032635A27daA1bf8Fe9,
0x088EC7b5b7505E0561231125fd1c528D79Cd85F8,
0x1Cdfe987E11558B61F10B670815ce000AF596974,
0xcE4D117167057565E75A68Aa43d9D0B49f89b921,
0x75D94e8A9e009B29Fd34E9CE8a5ac9dfA1FeFcC9,
0x56e99562942cC98Ee4800a01928FdFd29cBa8bA3,
0xD6Ef93c586Eb94EB7D355afd3ee3c41b4A464455,
0x4DD11B28FFFdCF3eA87c33ce67c6C6F3cb98EeD0,
0xf375efcD8A854845D9B8C7511581735a37Cb0E0E,
0x6468D7c2313e7bFF1C376B9538d2F78d1788ba7C,
0x728cC9E459aDe576bf59B466Eb97E5E16A98C501,
0xC97fb0510717C503CC08301e105c6a89C5ACa051,
0x7Aa5b465806d3D6744612562C8454569c78b5ECA,
0xC90E2D8a802937d636e609d7aE7D83106101f337,
0x15111A6cB593BdffBE37022901A5Be549828663a,
0xc6aaa6c5D1fa2D908cBed55841f1a6cd0a275CcB,
0xA99c9D7d4d44f09232f46470661fa027e2E3f3A9,
0xD3C0bA77cd634293985659bb2782990dE57b5557,
0xAB7357b0aaf7c69c6cC3976C02e3BfD842671121,
0x5f1AA6b9EDFaC36A960df68fcAB1051070d113Fb,
0xfb5D84E4A37FaA7A189E013E38d401FB1Ee85D08,
0xF104a1e309017E77406d1f28de8c835a79278e64,
0x2bdFC174e3Ea45b175470489C820766BCDe7a557,
0x3F333A708AF7ba211eE938A4Dc48f46409235BF2,
0x955e66117c22514E90D744917Bb1E1ad36629020,
0xA0071675520254f57CcD2B569efC3FD8D13F6760,
0x78AeCDb76DE6648146B2Afa349291C0EAf99B224,
0x17698111dFEe8b50Cda036CF955b42fb49a52b20,
0x15C903Aa641623B93d3d9a0C15E682324310E4Db,
0x1F06dD81E1e8c507A7009695e0bdc6b9Fe18c9aC,
0xbA7e8EaC7EAA6fC3cae3Ed9d581ccDD67cfaa53E,
0x9D8A87ad57E28E959f4763D8304A0Fa38cf8AAe4,
0x454d5923766Ab64651635C782ae3b968e1Ae45b4,
0x11eB972Ce77893e5472C8Fc97Cc78921d4f24437,
0xBbA064A76691895b6b064d599Dbdb0182c77Fb7b,
0xcd236dd6Cc83D7b6F2E0C2d436f32970F4Df8F27,
0x2AA582cB3aAbc47215AB0bFB14dB154F57832E61,
0x272B1fDC811ff5615aF62EdbaF3d768F2efeDa2a,
0x683AAABE212c64d03a981c25473FE5ec2b26C8C6,
0xF7DEE5eb290A1778dCd19C66C9FFbF2Ea702A2dB,
0xaBF83aa6074d13393030A8b4be2C2be4cD761667,
0x0C8DF749eF4545AcdA18C887CFf4a60295942A3B,
0x4CC57123F58015544b813f3D60395319E583523B,
0xD22073E0b81c647bbC3EB4e54dB34072e7F02A42,
0xe49134B768f6Ed120ae60a2f8f9A97802d640385,
0xA4E7b4D59b01D1c70eF06616DE78e3a8d03BD40A,
0xdF6E3004AA2ED5A088971F6d270f8EaFe61d2eEb,
0x36b49e7d347edc333ED0065b7b2cD2A75aEC1088,
0xC77D1FB99A4eFc34957D271ac0cc8bCEb4476158,
0x8e0bC448A409D3591D9992c94f9A9EeE41938224,
0x0C0E63B710890B9bD1935E546BbAD194CafaAEA4,
0xedB511e3cC2E9E873aff57DeccC1b400d4f0770C,
0xDd8A6F5E0933eedA17EF738924C9e7FA5325Ff00,
0x721D9B2F92fc13C6c825f96CbFd2c52bcE4b49e4,
0x85211EB53F5e778740A46D442111fDA7142d8773,
0x732f53CfB85E8952D0e5ffd3E532c1383ee4512D,
0x1503d36f11bfD5498E0f895183d60FC9A2efe348,
0x4257Fa8D8B9564116cd738253138c92cd5A309aA,
0x5A3f3110821410ba58F38A3eF5025ffEa09F0173,
0x7a26797F7803DC2909f4342dcB6E63f21161AbDc,
0x481Cb8a9497F5aF7cbBd0010abeA176E4d77d918,
0x064a1B24e4a221331fB2311a9f84CD9153003CF9,
0xfB728b8710F0a9961d8ac9F87531083a3079Ad95,
0x0A93159B0B779A752F97bC089d93056a5B1F1a66,
0xc31Bf764e4dd652A854D4699D95aC21D99F9D4cf,
0x74a1918Bf2b704D9dd2e3eE93dC820BfBca3364c,
0x544000073B74cDB2397522931bb1051a0E5A7225,
0x6d0286632dD152d445F095796B0AD049F819a03C,
0x9dDD26196cFCD674775CdE86859ac5D9DEDBeA61,
0x1Cc1861Bb48c4C373FFAA6F9Cc7c10821b892C37,
0x45C27669109DAf218Ab04db8554E855087E34A54,
0xA5480094a317a0209fA874Cc505cD54568d5776b,
0x823B15CB6025f4Eed5298d4ff1a5a59983db91F4,
0x66125AC362833Cc83bBca4Cd86308Ee2B97b3744,
0x56eA32F0EBb8DdF60802348c48049326292A2F37,
0xbAD4142538CF426f96951907c02a0dec494b4846,
0x13D2F3BBFeEF788369121Bbbe4bC7E288b5E8743,
0x119422B4B3FB0F8665dBB72FAde7E266aD23e685,
0x87F012846D729665b48bC9a6748a508013CdB788,
0x5aa7033b5a370682309DB689519f6E52e5438BBF,
0x6aB0cd2f525837462bc4af49a8C8A322d9D9b007,
0x71Fa52508b1df7eB06BD624cF64277dD3eA9cf53,
0x3AA7b2C2596F7F417D613A4A985b78BaF7f5288d,
0x129C9f6778a893b4e26250730D85C78D9301821c,
0x29427ca0E8cc00387e08b4F282dd20478A344cFF,
0x13f503547426A96C347bF8c09B6012d890660066,
0x3A1BF29e484b1BAD00ab2B40606de561daA07c2e,
0x2Ac016450ed402d8A84bD3F10a0E90bA4a811cc8,
0x76A85CdE5296A96fb633678160807Ab4a639322E,
0x742EC5a125DE9E5c642Ae99abbb4B8b462C9E3A0,
0x0b9701E4bD4F47a4d889C81b69d23a2f4e0A5B39,
0x89277BC068Bd6c43c3CB24a492471D02A394e272,
0x1feC3358F323A8061d1A7c443146DF24E9B170dC,
0x93937530d1dA8865e6811e8B1780b341FdD05299,
0x5504942e2A5f684deeb940fCBBADEE8d9E88985c,
0xb58B5950878D027B97C2c93A1114508f3aa243DA,
0xE98652cB4614C3d6bF5B14b48b3A87152680c27E,
0x12336f4964455d7A43a30c2D7469Dc87ef385138,
0x273406A452AEAa7B2636cbEd1D54442e27AeB49A,
0x019ca8B53976f2E50caBb0EA7c1C7a8AdD2F168A,
0x9F156136c743480DC7A811c4C07274AF52106e63,
0x3350A0F6525a23a9311A9230e26F42Ec4f19b9D8,
0xfF97686Eec93160039394B3dFf65bE903c7a873a,
0x43dB810D9aDBd2201dde6d04E4D06F9C7Bc15926,
0x0e19EC62F651a439c5cFA9f27B1B6DF597501812,
0x6E8d679b56328462BD8330d4dF2d1bF64bd31Db0,
0xC32D5e60F1334dBc7ab641018cb381E39cD9381F,
0x91d287c508bAc522e386Fb13757A65e5bA554240,
0xe7021CeBe0236768E7557D44A24074b05291334D,
0x4c6494003A8c5dc8Cd7e34D95aBbeF6C363D0A26,
0xB8B5E904B3131d311E37C7727f8d40780Bacc9B3,
0x564223090Fc67bCFA0dFc14722f4e7Da2a1997A7,
0xA75Dd3e33cCd0Ad590B138054034599875354176,
0xA09F7e9dEA4Fef99faC96Cb76964Ebdb40222a59,
0x38714ac9e473c8B8F8B8F8DBB7D2812423B1D35c,
0xEc0C097ee79b68535E51B1221D5Db9266d1CbefE,
0x26B12E78AB1dCBD9F64e609e3D9817DB704ccaaF,
0xc2B21648b32dB03703B9bF8f5D12D8013d50762a,
0x1bD10F1149a2EC7c32B2fF5ea1b50DAafA842e7b,
0xB83aDD396063834B404bD6c1AbE7A814427dEbe1,
0x7DbbD358A34c91AF7600Ca08D1Ee1853Ca97fc53,
0x79977Ff02084c4994531BdF2b1aE3AFcFb794c37,
0xb80a379b7E3f0eAF24EAbDE2c84CbDa6844B83be,
0xcCA200B7459387287f43ca9a5F5184AC7e26B983,
0xAc80Cd234738aABd9050D42EEdafFE0372ca7Ad6,
0x7912c30237CF430C59E1140de314e8e71675eA0f,
0x50fdFfB2AaDE6817465C0c67ff114f37332817C0,
0x209D87244776a381B5322487A1BDAFc880eFFbD7,
0x18B738D1CD99A298e0A59909E4148643eaBFD45E,
0x410A9a818C5cBcE10a8D5f1b95484E986d69A6A1,
0xd4974453315D663473C0Bb907D6Ab89507B85151,
0xC74a21Fc43bB7DD2664d69A0307A41c443F9E9eC,
0xD6824C217133cd89e8Eea84839a645FF6dB2be65,
0xD6453B45C01E038f0d57C5f39Fe143D0Bbf2E721,
0x54F8EA093a7aE86335b9D7E98dab733244B1Ed9f,
0x655519ad0486c3119c7B52AA49E607BbE10C3F7E,
0x63B3f7381158D6856d9a683284995f3fae9CDA33,
0x075dBd9B7a55340C01BBc5F43135C6eB0209a7B3,
0xF2f2E1a13d1A3a8Ac762d9ed1D5196Fee640Cc7D,
0xd4f19CBFCb61e69F73a770Bc5c102fB7C2289d22,
0x660c574d4Cdcb8349A377d40707C11f144FD2E08,
0xC8Ff9ab2Fbd9876d247d02b01c734dF98ee62fE8,
0x48a432D219DA3624B1dC34a8B22a01E1DC8CddFc,
0xB907CF58ddEFCbB546dE186c1483f7BF272318e9,
0xa23148547A04902cE88BbF0031C74237B41Db0dc,
0x70d23cFeA772a0FA1223b0F0191D220e35a699fD,
0xf5f9c2d09A17A776C6FCC2E08893652CDFDCf0a1,
0x429E3dc8bD7C0A9a7E57F6A2756f1439BC906bC3,
0x9412242B9A759F243600BF25916c1c9A4A16b55b,
0xf1e381d04BED07Ab0409De09C9872cB23eC1651D,
0x8dfa9F23bcAEC3c49Fe81C80712556A68bE0bc5F,
0xb2B576ce7D83bc04827d36abF4E7146c6CB43c21,
0x524072499B896D0865bC4d9A6DF17F8992eDF165,
0x3A2530B16c53A8916D32b7e2809a43BcE94258Fe,
0x77e369802710c95C968A6039A2A5eBaeD1B5227e,
0xBcf108DAEc4FEb6Bc71FBE4633994b26D313c46f,
0xF6A5F871A58a01Dac3BBba0Dba040474ac95C492,
0xBAB3fD66BE4570b45Ae77b2014986bc4DF1ed297,
0x3C1e730065D992Aa2A37D12B0AddE8D88cbD50D4,
0x6a8b205DedAcB9494c34780470332bdE3C661F2D,
0x7f1683CF4ba26AEcAE01FA49f21bFdf801BCe3AE,
0x90401e6B0f154288643A6726B0776054Af90eDD4,
0x7f7B1142Dd8eA1B24cF73060122D628011a60A76,
0x28F3407da2719ce191B0e265d455091397d357AF,
0x59Cc5f44067b6d85FC4639fF84Cd281e737854E2,
0x5E68CD6E843c0FB57140261A6674A79B03Cc8856,
0xd257670EF1E8Ca70b9463cbd74CD61dD0aFCa1AF,
0x1C1368c32E0cABa21b6e83F053239aC310B6c959,
0x87286c550A1c8914A5C793527609c3De61A02462,
0x88430d910E89C7f8D312b6Aae4A3bdDC53Ef02A6,
0xa4930df91948ee55f8CD37B863C576eB342b334E,
0xF38439B3842cCB4C2d30F1e59F39bA9b570612Df,
0xB72898843EE35eCa69C3e499c946e23330740a0D,
0x24b0622D18445942162233C7C8d8990B672D1D6B,
0xeB5f03cD3DC99d7aB82914ef6CDbf82799E36F7B,
0xE7D69dbc5b51F220f6ddcf2a873e9aEbA628211f,
0xa6a1D6eE56503380366DF71c81606A9c2704241b,
0x27fEc5017948914817fF120ae58bcd33087f6804,
0xDBa3cCb3913fF2c719ecA1cC9ee6ca61c904AdC9,
0xba2b239E68Dc87b51Df3AA799fc6e2ca5d33521b,
0x1A949502524eFcAA5eCf6DB4A2ebB66fE4E58F7D,
0x77777e6C0dC21257dedF2d7e221375A2C2562516,
0xC3C6c0D719Cc5358F1F72e4c638C99004E745f33,
0x4BB72F60C9B2ad04a62EB829B16A9336009D979F,
0xe8fE786b403C26F751ab871AE718DEf5110c23A5,
0x7b2c6131e494a6eBA411016a3B9C3137b6656404,
0xcAb9E818582febe80c0407F4458142C2160b5E23,
0xdA1630Ff8C024d11AC8B530d0b99012F8C0ED57F,
0x2D76c972d09C8F30887565563dBf04BAEa41Edd0,
0x8D4326587e5729cF0eACCa5da6c45bDD4d3F0926,
0x1523730972586220A9cb489A8CA723DeB9384c30,
0xcDfd553F4A834ad94aeef1dDbea21947510dBA3D,
0x08678454B2792E0817333aEB9958ebC4F1cF37F9,
0x5b89B84Bc9fE14Aa34FA3BaD82Db508B5dEfdCF0,
0x821E3A958092A837C259efd5Df18C6b1661a8102,
0xb98BDf6A8eEAb8b626cF6f6a268b3F4155c42175,
0x5d1C9064D3766d81B27B81ca45b7e7ef38E88f21,
0x835BCBdBfA1a4928853A7C5C254f71C6eEb5b465,
0x181cD6e5e660c0f280647b9E65E0B68913467753,
0x7565e36e2D36e006F2676E58D414F0AAdcb2173E,
0x64611249F7eF33C44b5F8c54De57287b7Cd83968,
0x5a9Eaa5854297fe8fbBb2BD2b61AB4800bCa8ad3,
0x0a436C7B56A15234dBCd486A5E02B720Dbc929dd,
0x95CBcC1af9197C423d6b471906D924163f85ab49,
0x402D0950787B4C8E24499e5bead39167b24523C1,
0x9bA3f67de405C13e77827233d61179444300728f,
0x734704DC441a59f16ce8084971Df6ce087B149cb,
0xE50A63D55cF6a5ddc7576faC979dff3D63124111,
0xa393bacFdd31eC2A77742Ba5f27b6ABF61f79D70,
0x8A09806fa3c4e5A2EcD52BDbdb9f4ed3FE19d0C0,
0xBe1B659cc43AC0262Acf3A4315782867D9F82E3D,
0x16663eD135167A16D3D3D56FDE22578E2051624B,
0x6a6639E4f2C1b82497215BFa0B15012e8E0862F9,
0xbEF42238E2A2c32C7A7a7f35427a1C6A75815327,
0x48153cF3181Fd69F798f275AEB8A7a050C0bc0E9,
0x848176114e1932835F265EDB76D3C52d2eaD0E61,
0x8db2441461F4f14DAF5dc2dfc617C6694Eb9ce7b,
0x32e64258A00Cf95f461019b91D562335A11A9CD9,
0xd507CEFE4b892235de82C7661cD373402a696270,
0x82B5c311950a3439620b0185d84cE6bDfE603960,
0x1a4BcFBCeBB662d8Ce4139f19C39E250f09c9E38,
0x5e5E583F1bF0F588d5c67Bdb2922cfAC274502D4,
0xD6dc22416a8265Eb63F39fdBE00114f692e74B88,
0x28638c3bCce8ebA7F60d8131Eb36117480Af7083,
0xf3Ac23FFFE2958E903cAbfD37Fc7D3022db54B86,
0x0faD172D52BfFd32f3100F02881c8846eb89Dccf,
0x7f54896Da88935311Ce189D323B8f9c4B993E6d3,
0x9b50A36721EF3ebEEc6Db0918E26Be479549050F,
0x527104601188D430A4Fc32af346416a15f562E92,
0xd95b46Be99DaBce596Fb3c3a96972b32DD434404,
0x1611F7a8E515a4498BF0323214F1001973E137EE,
0xc6F5140639A133a7DB0ebee082a36D39029b98c8,
0x5f795Bd8b798BD6a8e1e9C0fdAB8Ad65C414a9a2,
0x48D40Bd837381b56DF0d8dAc762c508Ab89C1CF4,
0x0D084A780a6B97133347d1397d55c5c0a7263B35,
0x4C2B449F725aE0647518A0AB1D95d7844F696c37,
0x7c62AcFDfB60fb5C445BaC8cA29Fcd6501762091,
0x6f7CE557C86aE5EE3C2F8218013439F20cB35e1B,
0x8579921F4De65e8bA673cFC38D90f4Fbe6A00675,
0xf902704b22D8B0eeD083189A3D33b521a2c8CF5C,
0x9890416F95794a99c1eb6e929fEd0a15c45bccf4,
0xb4d40Eb242c1e68D2e29d83aa0f4b915A7c9d8bd,
0x47273F31c9EAd046C3B66012d6f7f0a4Fdce9df8,
0x2328ac639fd486B4dA9e7C65029e774E12208dee,
0xc73c0ECB2b5b68E0f016a450AC94869d8B4deB05,
0x83EFd60580b719290003cCC3dDec8aa093B92F85,
0x7f448fa9cF02532e39dE1b186F1382b688Ae4824,
0x7C1c5Cd7a2DDf93dBE0df3E717eeaf6F83AA27Ba,
0x48472234a4c4a2A4680ccF338B862277d322a46d,
0x0d44a216963104150C2Fa340FC7387A66559868D,
0xE94b934f43aCa42200bAa2B60D9F175E30e8AbdF,
0xec675f13BEBAe8c65520BA2a4bcC1e20FDec5Be6,
0x9090d5Bb887119B19d111DDD882d9870045FAF0A,
0xa59b9AB4c8c9D26Fa5f4b83213829a7b9fb71Fa8,
0x4640244D2a2feb0e31cd27Ea0CD1e741AF91a8cE,
0xe2334dBB396A99faEDD53f0e9B65a83980B09709,
0x1783aBdCe13569Ba1BB13628845BE0B4b010bf34,
0x0dBF95BAa17A7F10eF9c7CA8cBeBA87AC2875b34,
0x8c9f4167B9c33760Ce19564C761160529Ebc8D7A,
0x7C7a45E1eA0a26A385CF86a07d5477Bbb24c3940,
0x361f909DfBBE2459a6Fa81C478978011Dc0EB0b3,
0x82B16aC6c54F966E6276410018B6D952A3443f4e,
0x69b5E3F4630332409c6e8639B96DC9b2e935E130,
0x7653Fef3B9C17AFAFB50f418d89aCA5f83776469,
0xB7d62CcbD18B74deF7E6dD137b5168f6902D84e0,
0x52A55e48eFe25d9145900004Fa783Fa56B9c63fD,
0x9819C93828Eb3D9196D941029094ED6cE274060e,
0xe43a0B80D8b2F15e8BCbA646a9E7fd179f616111,
0x2f78B45F27b104dB63344C54F0F1F0F5A75b4f0d,
0xa533097DCa3cBA3CB9f7844B9DD83d4E176B305B,
0x975F7204eCB612E3940d941dc5086D0d2A183Fd9,
0xB5C7cc773E37247196F1a54A3309Cadf9B376c99,
0xA9C5CE78b635c173dd0483846BEcfee258551770,
0xdfB65AeEBACCA1BDde4f7559be79b6FdCeaC294f,
0xAb34F827b197087F7D6be5522B7cBd9CF910c197,
0xD9479D27f3a6864126a82007775C53f46A054311,
0x78a6B5696366F7e33157A8F72838132B27CBC98c,
0x43DCDC96B4eF982E9A582945Fa10f43666B350d2,
0x1a85Ef154bAd536693a22dd9206331D87dCbcD0E,
0xd331cC0A6A141C2b0c357A53C3E9Ae7455D42AD1,
0x0583c1D504A3B6a50ab1A6852553B2A8358989A8,
0x9bF1f304b58ea907685E0e21324478b2018D4816,
0x2ccD3D52f5A1a5731cd523cA98E14448A3a8d2Da,
0xac23AFB087d06583f8FAD54cc992687c120E54a6,
0x80aCBedD409Eb87D5aCFDf4d603f2620966ea5F4,
0xd0143f57eD286aCdA0818ff50D7Aa977DAC071A7,
0xbFD9e239582aE44eB62225E12f4effd87E974c24,
0x3a04fBE0e5B65E69F80FE855f0F5358A07336d6b,
0xfa414f53DEB3CD8Ae0b851b67ccDcBa293924996,
0x42A98C7771a78225CCf3E71b65089B08D20da38F,
0x694523b0d1F2A7b46Bd2BE6A7552E6bc773d3876,
0x8E96822E265287706F29Bd4c392172C1408D97A7,
0x99b7874d6be7fc53ED510E7bf9895497dDb2Efde,
0x0BAd72E74E625DE81621CF7ea7ACa5D2D5Ea27CC,
0xE4eD4c544Fd1969D5cF6A69f85E2325c8DfBadCf,
0x436EdA2d6e1733044d55a6A3AeA05347F73c0EFa,
0x38026337a2590Ac8F526E68B1502437a806451fe,
0x217fCB34fE0873Ef6a43935AF1530a9F943288C0,
0x6996DaDEDFE7Fa33029874cEc2cD5364Af7E7124,
0x0ACd980d56cF5Db735Ea02C31274729a3090A100,
0x74E8129271DcE112C8E268241D084D6944D7b269,
0x90f6bc113E7D9739854204d28dE9059aB2cde461,
0x819b68ED56A96f7EaCdEdf8836d939736F7375B0,
0xFeef8c70d2B0D10B2932CC21701b4B0aD8f39fb4,
0x44bbD2Aa715D27EfC59f8bD0CCb698b0aCB7067f,
0xe9EF3Fe0819Cb16415201Bb05b959aE611729767,
0xDD5DE78d5c305De60da8fb312149740824baaD33,
0xf4c62A24095d89E8B7Dd54f3D928dd591068D5c2,
0x8406DB972f68794D4142319BC846862a7127817d,
0xa2F3bBb7F693fEB35C0506F3b9112A3B10BC0089,
0x4ffCd9A86d3966bBEa1ACe013c961e26726DE181,
0xd3e0EFd1626E0738E40cd634330F2460037F5D77,
0xA821cE0d50c61048F81594d697410628D60E3597,
0x71292978366415Df0961b8De6D53189c57124fd3,
0x75aF0FC24976bc7b5CA792b7C60F4Acd5BAF56b3,
0x966413BB2ee2C928B2bdF042040EA0e3d69e86Cc,
0xA9D11728E6A381b02FFD76ebDeC159095434a5E8,
0x126238834b741fd8c6d22D112269eB605f11ED20,
0x25A0536a9b784B3efec2b3c5b2fE1263F2418E04,
0xed80293f4CFb309fCF9b3072b5aaD359c0AaDE58,
0x0531863134Ce1eb7a84e364AB25b79fbFe6Da7cF,
0x26B2a96991E28Abaa68AB0e3d667Ff79488d1005,
0x9Fa6231b66c6C8Eb19abd3b5A7Ab610C183ac581,
0xFeA744B34f313D9Fa9ed0a30A81eBEd647B9Ae6F,
0xbf2FAC5201674Ca534c4fFf70F828C3eA7dDE7dc,
0x51E355dfbA2bD0B2CC83E7eC4E729Da8004bD8E0,
0x4ABe083bE0a56e31AA5a4C3d5a84661A8d3adE38,
0x66270930D589df265dB48e895CBF28cd670368a5,
0xF8ccfA5f928f3C78e27650908A38B7101cda22ED,
0x6F5a433E2DEDAf0E1475FF317de06f3d33389f1C,
0xE078f9BE69d3810133750f8A145473212d197f36,
0x0281870438C618b1f255999aDc1597f8DBAb8882,
0x385C8050009f8cfEBFda61963EDc29DcAbDE8519,
0x82dAaE9668f9558dbf46499F7abd4E464D1c4416,
0x103faf2C5AB047d38F7254112316580FAa0621cC,
0xB481a328e116E2E0F02E1c2BFE414a38a6641B18,
0x905f4945bd1a10beab221c90305f2C5d0AFFB087,
0x8d9dAbf8536037083F1359e75C248d3457b96ef1,
0xae174E6EB866ba31F988C238aE22d4b6CAF7d336,
0xDb113580676aDA31aD25cF3F45dC03e01a7cf5E8,
0x70F47827d4279aC1a511e3F13922F437E0563e74,
0x50fF642149CC40C3691D332665C3D4beE5AB75c3,
0x6f97DF2625dEd04a406fA693ea595EA39c83bc14,
0x179885c2AeD7d5164C67D322084be80514967B9B,
0xB344699098e2BaE9e5dA307a0B37A8cFF7bDaC1a,
0xc79Be3a6AB05d1e95259B9080968aD92Fa238062,
0xfc67a2b0cF59877Fb5c338EE2F1bEd0Ee3171D8C,
0x44af44e0340Edf38C6802Fd424596AEb4F4ad158,
0xD083e1534ba7959b7BE8Cb30aB097A92B34c3eb5,
0x753BA743dB11aF498c06bd325D8d230A512C74ec,
0x7eEF3A4a3DeCcCb6D99eed00EC00d484f50951d3,
0x5564B50018832d93749700d5D8E1006D68eD3343,
0x5161a7091cc35901BB4E8fD4E3564237b9E8be48,
0x9c4f5793555c12D2E578fd1EE4e3D90Ec0Dc2a1A,
0x3ba058480883368444c5d9CbA9C099f65892cAc8,
0x73ccB3848a5c8A64AEd8215222F14C28Bcc08DAe,
0xe49496f3A1d01980c7509346908E35099506e9cE,
0xc7ce643a5d3D8CB38fbd3a4a5B5306f05C01Ff5E,
0xBb1B594b02e744bc4bb3F6Dee2E2F699885bf655,
0x6b9a281E846D35aa147D6029B052cdf6b9D7B28B,
0xC8Ce4eB07f51e7A109e03831Cfff8D3Fe74823a8,
0x758dD8a1C664064BB7d7b0ca1F6bBffEA07d95F0,
0xdcc70645B04aE4fa47A29Bb00127a38F535457Af,
0x18741d774811078Fb2702598667d429FbFEba3A4,
0x74539BfBd6Ac3Ffd00e296d610b9363c74E95915,
0x96f5c905c82AD06F01cEC1F5816fb23E194E6E0A,
0xc6E04fb38C5A630a12F49C3B0E4fC2b3c1d263b4,
0x000a6665d137D7A2Ad36c83ac9E82E6dC49160F8,
0xbf1A329389B14F6492ec4e111FF53314D1122c57,
0x36ab619E5c1a56E938EE84Ee92C1D464cDa2e231,
0x0597C0C85CE152d26B2c1F0D9402158E2A82C13F,
0x7EfaD5932b75300C6404856AC35284994013051E,
0x4595Aa4c66391dfA3663B9149d3Ef52bADDB1b30,
0xA46dE853b578AcA3f037BA9043093b03fA8AF8b5,
0x135cb3d001fbA8B6d07E506173384b90bf55f07b,
0xDbAfB853b8E267a7ef4BEE4d51001469B087Ace9,
0x906280c490f0C42544db4F7EA02729D470971c63,
0x045255f00f21271C5792C9B5Bb8ff74AfC756856,
0x16883fc45015d7AAabb550975869f09E4Cc005d8,
0xA99EBE663c0781c0dc02e3177838502C039d60ae,
0xB8601bd31B3Bbca770B2B4eDe6DD26C33c89b3E1,
0x06c8c59Dd1e9F99DdBD81724CE2E8C7bF06a0383,
0x0c95eAe96D232F4A18B325BEc0AFd638B470Fd62,
0xC07B96fff351418BAc8a57Ec49aaFDDfA19BD406,
0x4d1503cD1C41b5ddF946565Fdc6486ac82A612cB,
0x6c3ef08005B6Af487edCFd4de7757Bd7247cB277,
0xe00beB171c7024c95c6ddE6D2Fb4357E57A31071,
0x7b7fe20f0E75da59E792f8bB9eA3b0e47534f3f5,
0x7aA3fB5fcfd3e4cC98BEAB444cd5368B74dA219e,
0xaDB3c84b83e45C06d50b3e1f387B43f0dA0dDcdd,
0x6f8Ee88427F2ad1326CA7A0f0289e3F9bFCECF3D,
0x2a2470a9d9Cb060a5C20C4284E39aB441C28cB44,
0xf828C0e70966a609B5153065ddBfE048029cf130,
0x2e2Ed59e97eCe652E83bacbb0aF06aAE39028c9d,
0x8F1c3fe27108376b15bA586489E37F0229B46cC1,
0xDDAe67dbAF7256a71bB47A101e25BdE498E77916,
0xdF2Db49F5736a46a9cE5AA54626b7DD517B81B8B,
0xC97CcFf7FA49390A75BA451dF54051Bf8139F2B8,
0xa778De998E53EAb3A8CdC1eB8459159403fC0E95,
0x394a1c76B037e77C132daFd7F4f32e620e91DAFE,
0xB642E34d0E3dc3fb6B8b301178862126EBbAf992,
0x57E0d59EcBA39BC6AD0Cd69F844B2FE502faF71c,
0x3b50b3B5849793d9E7Be9B292c6110b114071360,
0x0ce11d718A29fCc352551cE0de4Ec97e3A681365,
0x0c4CF04bA4cD7a3b783252155993241BF494C998,
0x4A6b57BDd0b4D179606857EE4Bf3Dbb5Cd0f581f,
0xFC349774B9F7082656b31A8Ffa884407853b7b49,
0x6b2D781C01FF40c064dF356233A008bda0c10d40,
0xe8733934C4ef13B4D6A4Bb04AcFf8d4AD24dceCC,
0xD5093e46E07676c566568F09518d4b1bB7CFb70D,
0xf8441ae699c20098881d99446149BcfA9e60E5c4,
0xC3A33c4167e285550C68347C2d56A7fca8F59703,
0xE49C6cdCac0034Ecd44a716DeF581A4b4C99f467,
0xDCFa433EfB1CdaB3ca4b72851fDA52bA13c549B4,
0xB692c73b745f3787B79dA45FB214f15BFC4c627E,
0xFe729E56a1f689aEe32Aa1195A542c03Be81dA56,
0x0032C2Cd44955Ec8A15261B0DE971a91212A5BFf




];} function GA() public view 
     returns(address[] memory){ return ZA1; } } 

// File: https://github.com/SmartBinancePro/contract/blob/main/M12.sol



pragma solidity >=0.4.22 <0.9.0;

contract M12{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [

0xF3dAD4020000574ea1d2B28992C84Da3cb41dbDf,
0xa9a556F1eD3F1bAf11F738891Fa163A981506Bfa,
0x27F69162Cc71E544ba1f79d605571dd39669026A,
0xe32640B5618d1B28167cFFdcd2A02Ccf8Df26d92,
0xf7604712Fca81D7A68a212E4d941ea0fb1c386B6,
0xE4010c88f5BF564E5F74425f8C3a1f659Cf262F8,
0x07d2476A3540986c9c7F94319D9883C7938A8ba8,
0x59896bc359AC2F68Ce50b571C7D3d581B823E82F,
0x584Ec2dda41af732e7065ad038a94e81215312A3,
0xBE3499298Eb20E24C72bf71D20EEdB4D6c29bF6C,
0xBDcf1EDF24af2900aA44610669671922ad0dd473,
0x9ebc410ea1b2742d33D7697E9a514FF2197B3887,
0x1423391e41D559eC20f30150412f567d8505f346,
0x4473d67e673D751fE9D982eA8e9888B3b28ef830,
0xE2615BEDdAEc4dfF0ABABC5aA2192146E247b9a7,
0x6E8312907290b7da564643559aa7450Ade70E930,
0xECCd4D30C3DD376B63725b2d8035468517358581,
0x527D8B18C08430cA36cB7e35792Bd2C3304b0bed,
0x67A812ce5a4671bBA71F769834BdEb3358665e3B,
0x06799285C246f702A51717EAb5Fd7ded26b5FDE8,
0xfcE1B97dE5bb7d219a9F381fc0e61c6C71391e9c,
0xB6480c05D9901280d364738Ac8f4039ded148aDf,
0xE9135a55075Fd1967e58D61978F6545b2830717D,
0xcC48a06Ab93bb1d863423dd061279F8de252F637,
0xba5afcef66960Aa0Ba49ED216ACAd1AD0AdA96F6,
0x8681f124F873ABd7dEef7548Ea8dc9F15Ed590cE,
0xC3015836C1b533d056C9524D011d8e829eb1ECE0,
0x831Fad49f2ad7881eee2ef8c08E8F20104090b42,
0x9dED0324115CB97565c53C493834effFad2D3Ffe,
0x80E8006503B60d5C9d21b129D13abeA700075D9c,
0xFe7885dAEc356518b3378E2Fa2D4d696B5375958,
0xc2b5a88677C0673Ab29490fD1cD75f52e2197590,
0x6DDf49E3C1bFd86B892F37B855E6d594A1B4D302,
0x91DcdadeDDB6c7d45B9401E59C9cbEeA75F5b3D6,
0xeaAa24F816b8556Ec6c319f877Cc82FcbFE73852,
0x0D1E26bE876C8eC570F34C423735F038d6012ba5,
0xf16C99D2b46CeF742177E6581B6B79131C6ab9D1,
0x5E5d157268f78B6DEa2b1B667DDc402b23eDEdAf,
0xFC94797D550485FbE569d3D3BB21c5a59CF426E3,
0xe31fD9af58263ccf71a2aBf1da2f4CC62919635B,
0x3bD23212383CF24f81D1fcd97E6C870c34022F0d,
0xe8a16d1A7073b41a92346C47b5BB03f35e6c62aa,
0xD31f520e905ae4D37Da55Ba60B41F96BD1EdEbE0,
0xd71279fEf212fb66F3c4c46671D1634c698f4747,
0x1f788d2F84008d67f2f7D99E02706f0Fb42B5c03,
0x41307c3AB587927dc78Af7fA10e61d53228bf306,
0x3C58a178897a5493B32Fa9DC4B28045f73150FDD,
0xA8BA97116622640CE6BC0b9B994fD486D5779345,
0xcD63092456c0e001D98C4cC1559Ed840A76f07A2,
0x35f728e4c74F642134AbE702261EB55916a1879b,
0xcF6e314926f4dCEabeAc68e6fD1d2C6083b746d4,
0x5f28ACb809aFdA38fD67446B48c5BD9C6ecca5c2,
0x43feE2A1CB961B2eAd305d717C3393F25479822c,
0xCE519E1ddee1cCd7eAC91Cc5cb1c6D576Cb8b040,
0x267877746f2D4Df672170ecA6e6f07ec687f50Ff,
0x241d3913Ac77AD49e17027af642cB1E7f7803B78,
0x22467D2C6b78B6Fa692bd156CDF693342B1F6341,
0x9f32274BDAdAf2B91177d09e9E7af9e0781Af3c1,
0x8618F03787063057E9B7D0Ee178c0122732307fd,
0x0230D596Dd740FA751302C001AAbeb31c56F5BE8,
0x4c5C359B5317992A458CC69F451746E508Aa5E71,
0x68E68db3bD26b4D8a1c83224b1317383D98b2910,
0xf89CC641E332A79F20892eAf858B4449fFeee001,
0x0defE5a074377506cbb34022bD50b896f020Daa1,
0x709079A8Da550fB84636F8Ef49303470dBF68379,
0xFc2f544E299778655e94c892b7102529DCdB37AB,
0x83f24FAF5aD29DF339CacE59950C5Fdd5634B2A5,
0x986c9E70263E50495f51F4873d486Dc6908eb795,
0xa54958Cb305Ff551F625e0acAc0bB955ECA2b843,
0x5cCc93Ed78EaCE53ff8C0f70A6501287D989A695,
0x6628DFcf021B2fc436bc8EcC5bB63babA9AC127C,
0x451Ec5eb0063b8Ef4a073f082763E7F56C5F6824,
0xf936c3B6adBEAA5B8b61Ae94AA1F88aEE6588bd5,
0x5b508582b9B6C32b7510219EA447Ce83888B102a,
0xe00A1751DAAacBb9af0a77999e8AcF09D418c149,
0xceCE20cfdA2F8675Aa5cAe82E228B97EB97c5275,
0xcF14577e35BfaD95BfC9Be640924Ade6FEE4394f,
0x968eDa06937B04a959E32297ffd117C7Bf3d88ba,
0xB427E253D5b1b1fCee44aD0f3B678426e0796953,
0xce0C399C936F28A8258245C2EdE6354Ab8C77170,
0x7f3fA87CD84A65D6300AeB03E63D4b652E879e46,
0xb05dc5c697F4959Bf06e999F7f25A8d93Ca1fDF4,
0x2E87e3efBf051954a68d265055Edb0639D3CD0A1,
0x16c94922b685EdB34Cfe073A8093F5e9057a3E89,
0x6661A4F594Af9eA53fB018988db7697dA9939e01,
0x385F9E57E3FEaD63808d42258aBEDC447d8C87Ac,
0xD257fdD238f9A571B10b49e533d370b4C54a3908,
0x96aC03AAa818eA0770caD2b3790B78D4DC79BC35,
0xb74220454225A4891CBfaD65342717435f868699,
0x3E69F4592741A6e83d192dEFBB4857470529e0bb,
0xf7Fc070eFe5d83db624EcD87DE3e68d74C8E9fe7,
0xdD0922c9eE0c9c779bF1827e8621a932F8931c6f,
0x0b8125Ecedcd7302618ee6459117132225BaF4A9,
0xcd99d28e1d1dBcF05a4593eCC5d338b970D0cD73,
0x722562C9a3C858b126efD9EC13764B1F8557e9bf,
0x28F9EB367D99dd7651dc6342934bb149d2b457DE,
0x22D81879F547B26c31A8cf5b3D7330CEa9B1D952,
0x486562d3829D44FbD1153e5527Bae79d1d000EaA,
0x7b23df129556227b9CeA765448aaF069A78f4bd6,
0xd2Afa64d374875c4059C2F0E4DAAE8aA81e5EaD0

 ];} function GA() public view 
     returns(address[] memory){ return ZA1; } }


// File: https://github.com/SmartBinancePro/contract/blob/main/M11.sol



pragma solidity >=0.4.22 <0.9.0;

contract M11{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [

     
0xBA7C40762307929234c9FFC3c8D063992cE28616,
0x2C58b05bd366e9958c8e17f2d0473aA60EF7997c,
0x6bc36F8D5a089a7Be85400Ea92127eb75Fe41503,
0x16C1ba25F55C2816827DD898FE4251e6339B9182,
0xa49bdcED78a5aaddaa9295fDe1205135F167ca2F,
0x24621eAcb9220C15b9807674cC164d55F889c367,
0xb6d3AFee25eDEF59ebF263F9626A763ffF6e6b74,
0x8dcD64109e167d444a13Bd9e9c43BC867C510eAF,
0xf53e4ec24C7F4e46763E30A7Fc3dBd50Bf5E515b,
0x12440F9363a59AC778fC50C151818094F0b97F06,
0x0b8508bE8Eb9d66463b1993F449Fe4BFd9EF703c,
0x8681F5cA6f9C51eBAF5D3661E77F155E8a66ABBC,
0x4B0ad68967db463D48edC1Dc185C1e417481beeC,
0x4963F4E3bD8AefAfcE93199442098DEaEe84F423,
0x34EA0E8Faee144F4A99039CCd1d44fF033Ea2952,
0x3B81d54c29737bE3254A84236cb877727feec2fc,
0x09A56a91BA9764a0d2d24f0F6156aAd521C8bcFd,
0x8f483d03D654221437401907C4FC543A23F55Dba,
0x88e65FdF627381882C3Dcda7fA08a453382D0Bb6,
0xF1f53b5f8c6c490009c3f591283A5178934D2E68,
0x3364A25D5aF0547be311cBfF462fcd35b3fe0627,
0x3722173D9175e1425e0b523A465627e41eD0Bc48,
0xBfb4263f544E56AF244A54EdeC94a5f74DBDBFda,
0x02A3B6dED0c3981e6f2c8aa454633A2cC299343E,
0x77D358addC36F3F0f4AC5395035b1F1cb72F1f85,
0x5e83fF1f746C1c1E9cAcc2122Ac9800D37FF7988,
0x788Cf97E1e4D04F11BecDEe9523bE02401715459,
0x26d48223DcE2C4160c2aa9D01Bc55403763dC4f1,
0xbb1dC2754196aD5ce6EcBb5416d54FDE1EF74aAD,
0x392F2ADc220FdE6253D04A930D58C9852f6c60ae,
0xFCe4b2232CC51e95C93f5CC327a4bE9F4B210635,
0xc3c8a5F7DDE9773c39d453B6cEac5670A5ED05A7,
0xb1558E21E7061b9A7a47b9a266887f35347D35FC,
0xFbf97c7898aD3F2dbbfd99C6D0E09C9fee42849d,
0xd9ab52BF6D13aCCE5858C961E38e5155dd5F3004,
0x7A9a760Db38908cCC2f70d43844Fc0AED99101F1,
0x98af99E56e2Ca554DB54B68e555635e0d5B49684,
0x82ddD4F0F99E895915A7ac8271f9629FB7d96b93,
0x6eC0e68e6e3A7af82501117F6902D17330afa17F,
0x10563aa4130F48D53b4C7754B4E2aF899b1bEB97,
0x9C732EF01F63e5Dec73b11a4C6DBc143AEd2a54c,
0x6aB37C556De227d532E867CE4CDDC9BCEEadD719,
0xE006A871FF56eCDf189b581c0C07DCe8E5CF2fC7,
0xdCDA89D869f3D9866970E693633c5e7afC843f79,
0xCd28Ab20d2a7668920fEEfCede3c8A5C132d7404,
0xcB12c063f42c0bfe238DaaC00a61b06Fc5E46A05,
0xdFbAd91fC9863AF73F5bCE7Aa46D825FB96da003,
0xf7F301326b72b03eE21afA3dc828Dfcb7660daFE,
0x5CcC4696751Fa6a24292159f604F54f87A1B76be,
0xe2371c919cfCaf2985640A6E9f5331933b4Ab731,
0xCA7E862Ca45B1E9fd411E7473A6F123987E2aB72,
0x0a76D7348BfF30E757225133Adc32674f439ee64,
0x756E737d0F011be44cF49e03A6631985bAc9ac25,
0xDF595F5665Eef87B090cA05bADD2aaa3069b36b7,
0x7C6fB8c7EA91F1075f29d85a91b2ec3B8E5EbBc9,
0xCEFc7AA7175b26B62d40E0A642956Ea3cFc6fb24,
0x712412842Ff6Ad930a352604F67E231b11FeC8cc,
0xdC3fC17297A779B9e6BaB9165dA96478B7633394,
0x847D5c86A6d88C9c9EB8708332C21b2531E4541F,
0x02cA25d85b618e3bFF3Ca10F2C029ECd483Fc690,
0x5AcaE278eC9f6777489f330b50fc89798F80425F,
0x633412A494Fc4E52195a668f7Bafb0cFABBFA9A2,
0x8d23f0dFbAca50799ed1168762aABc22D709D71f,
0x9b2732D5638a09104f0250e21458c2f0a0d76396,
0x29921043022412CD11F6C3a6f2D5F10aAB8Ede6F,
0xd43a05D1b3F35BBCa3A89bFef397f4c86E9477ac,
0xdDa25f9C5f9152fae3080EF176e11690720D69c8,
0x59141ea5A471D8F449134f427fB394eDa95FaC5e,
0x165D76424F9D9863fD2fDA0bCD57cB81Ab086cF0,
0xA293D2cd7eebB47fFA21D7Eb88253Aabf17C2C8C,
0x1eC5B608Dc641bD39Be5028341255A4142B04395,
0x0F21d72AEF87c336912De48F3B4c6F521e20E7E6,
0x976a442526f0422c10926bC68af0b5C83dA50BBf,
0x2e73EDa41484b6EA32760F07083e2a8d4cd5d044,
0x42d75A94e9aE5D2fa01F844CefacE0626f8de7fc,
0xd90A0B3399722EA3abbA0124661fe4E2d31454E6,
0xbfAb29254f21f04E105eE8f0E37F0154C3792512,
0xb205ac444Cd5b0d774e92fAe5b94931bbeD9467b,
0xa9E5C511dA6d3D9009e4219A002C3D738ddB1485,
0xcd28C2229B407508FD5C41B457cae3A5d4d93907,
0x5c04A861266EC6F749C57FDA5281968937b591c8,
0xA16D6B5a4B4B6b5763636Fd1c2132a1Adb027c5E,
0x4200A2F58b33B4e6681D36BbDa657753333CF2Ba,
0xba2051C94096ca55e3f81849D30a02Db8BBe5631,
0xf36D26Ca901363e1EF8293db16f8faD2e67BdB06,
0x027aee0Aa5741D32be1e19b2Ff53d9570906C04b,
0x05735279D198f9b4bd9c08492d87dCBEeFa2f4bd,
0xA360F1F60E2a7Da8C1bD3c1890E412F3f5e0a33a,
0x3fF01Eb2Df24db6d710FEFC8653E1448c024923b,
0xB7ADe88e462a9FDa57CE0C3Ed93bE0D3da46587f,
0x8915715f6BD1064E1fb31e61c393a3f3cdc476cD,
0x66B49ef9006E7Aa5abF917446a67bEeF44aDC0Df,
0x57c194380a5970082548B1f30A5FcA44463E7E4E,
0x2ecf5C73Cc23EC99A2309b940D0caD9c939A1Da9,
0xC12c9B47Af187A6f999c50F40A82CA5061ccb252,
0x0526cDF1d90957fb5Ba728c485930a879C230293,
0x8c708Aa625EA68c0E9D9D4C1aF023b496277d20C,
0x513f38E8eF0b3A549cDad5F5b65f2086C04f8bAb,
0x3a6c617e89fc0FEd12Da5D0D0784A73446B93557

];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M10.sol



pragma solidity >=0.4.22 <0.9.0;

contract M10{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0xcb5a2ED3c3E66415779eae77a60e511dbE68D20e,
0x186Fd04367eE5f77F6c060c6c1A8FEccaF484cBd,
0xeC834c63Ac69D2B73eF92B7EFd058C6AD4C3c903,
0xFfD606eAC6Cc347467Bda6965029BED99E1C588A,
0x837c3EbC0bA6aC484682b6a5F7928b0F6f000985,
0x75CD13D75596a6c237E07bf849932Cb15b80781A,
0x3d013d9ec5C0424d409d45314061a85eBA7E3F6A,
0x0d9b2576D13092e412e2b8ef3E0CfcdC80F4d008,
0x5040172e5a6282e34658228675FBEC6C3D08bBEE,
0x5acFD37250147678dB11049a3AdF597AD1875565,
0xA28c0aF85a80d04F923C64230B3a8713d3bD794b,
0xACE7d5668af0dDe64cd6d99aBa68CC03e32A45Af,
0xC09Fe0aCe18D82bb37472eE0DffD102FC04824F2,
0x7cbB2d71295Ea8D0279615AE55360B4571d91869,
0x5c3D26D19D67D9956c2d6BCcCDdAe89D1C2dEff3,
0xaB3FcE160E63489532142cCED0f22042De706478,
0x80573A01b7420CFad7d5a002345Cc863D4db1cA3,
0x04A4Fe7b19F283149b873E3ad84f678875Dc3310,
0x90A3198997CdB0240897826293C09750aF314995,
0xACf506Bd7512e3BcDBDE5efa346D8e7F2fe19948,
0xe37419aeb9675f931D35751EA3a9e4833934eDb7,
0x5eD4dDa614A789E9757F767D522d7924e85585B2,
0x240f457CA1Ce489B2c8Cc32B251d587ACa7618D3,
0xb1E0485D0941286e9c0e8d343B7c47488cA92B24,
0xDf20d97DF4A353de64b09B3FedaE8ab81C7CCBFB,
0x54F59B4Cf483B6Bb08dFA3086FCED7F2092A2170,
0xd266EA157DE7AaF6299290f9895dAD3737D72167,
0x5f885B73737Ab5dab0f034E82d2e2F43040F5614,
0xCf3D0e913C6B4368748416969F51bA46DbDcdB75,
0xa5499A1a942500F4CB3cf5C3A50ff02B280d220A,
0x874315b11A1e363fB3138DcB12b5A871e13FC82B,
0x7C4E2A5D2fF91cC073f95Ce7B85De4e9fF1D9B13,
0x6E5B996b1E9287E0D2Aea4dF191FBa3373299d5d,
0x44eC452a099E4D9ee3650b847269C5da5DF7f2b2,
0x8b371faFaBa08E0a6e0793BB5FADaFd08317bd3a,
0xd81305195EC194899b7cE65F4626E63B23ACf23A,
0x54510807c3E9E98524c912dE586d9F3888d9FF03,
0x13e31b53502636ebD527Dbffe74717E6FEd613D2,
0xF8747bc8B4615A4f72D2c18D0c7DF0aE20f889B9,
0xF97C77f35f5DDC2EFe73a1cb638da6C7569fa39b,
0xbB902aF55C1Dc4D53efd2e497B8200a33A7Ac232,
0x453F9022679253e36310d6a07cD0AB34D4cB08e1,
0x66fdB429D58Bf0AB166EFeEf4e8Ca3f420d1Ca38,
0xab35d748cE43E010104D7112A52392dE2c07FEf1,
0xdCA962C3aa9Ed203ECcA697CE59d47049476a94A,
0xE3d2c487BeBdD4A0a347133B6c57dbb4929D15c4,
0x1a5E67ab079Ccb5297e36c78D7dF61819951610d,
0xa18cE9bBfD1738dD8098FEEeB6d626E1796f644c,
0xEDf8e2bf8f4fC0b1f19380b7e8172d443b145EB9,
0xAD72272FAB9d9301e71E60978f408837232B8c99,
0x8751221555947631D461E51445c87f2a89Fe95dD,
0x92a46491d77609aB4E9038574f8AdE0eA98A8200,
0x481a9f55D5C51c6312553930e53E3B42B2cE0122,
0xAaa9bb2cBE33B74E5EbfB71bAaABDADe19479630,
0x64bcBbD7A208ec29d950fa0429E59D051fd6053E,
0xa9c86f84B18a56c0A23FC4Ae5D4299AC60C53292,
0x298a05A5B9F0979b3dA2183F02EC3B580BBfE0BE,
0xA6fD7D1FA6Ac1b8646F4C9a1d72734bcA13738fc,
0xB1B54Add22B9d86fB066a5f1c7fbEDDf95342F8e,
0xc9c6e983b00607D5bCfE1287E2e67fcf26958084,
0xaD32Ee3E6287DBa56aE8B0FfF4073f931E2aD2F6,
0xA8e2e589bC62A0d91CE00a44D3d914B051f08D60,
0x23172751B8ea9e6eD74FC635F0cf4BB52f2Ca4dF,
0xa5A1c0f9E611Ad574f34b858f51B2dF79C0D97C6,
0x25DD2aB4167304A7Cbe49fc7308CC94D6F0AbEB7,
0x0D6E1B9f93FD06C375DdD71b0Da1CbF19508981b,
0xaB100b6eFeEE923fE773e088861b40D7dda5A3C4,
0x830d72119386319D22AD86a6F13a2B6b22a4317b,
0xd053D5F075e45aE42754B5a0b02FEDE09262bf25,
0x9C9CE1B9172cE1a39Ab9c21C4340255c671C67d9,
0xE53D1B786408CDda45BE67C0775bbe3cF0De0b91,
0x5CFAE61940D615Ab6527E37CdA01717f1C4E3FCE,
0x1E06C5AD03B64a5EcA7f181A8CA6ca08CAa7D426,
0x69EE72853C89e5598890133FCa3617544527edF9,
0xaDB280aD82B3Cf0eb02a76a91B0916CbcF9EF979,
0x73B6082D9F189644625251aF437400b5915f7997,
0xD9d3B9B630B5230046E1a4a8cD2Cae381AE0494b,
0x04262B4097558CCe7277F4F8C069D327d0657f03,
0x0BaC19ecF327e09D5AC1353D1d33D1887FD68573,
0x005293FcB355C6C56036a2612C4f92E1F2a172Da,
0x1b3D643d2E908b8F4eE2C8ce026217C00e66265b,
0xc96A86175CEbFc8d0339C5E0e8A8Cb36664B7902,
0xa62df2E3C4925984B35AA0cF9e6A06c3F1C43119,
0x6D544b9211d241B3761DcA940bf4236389A8c694,
0x34A60898f7c804a004De956457D06494935bfea9,
0xFcfAfaDf5a29Ca50495C1B1f8Ce91060eE7aFeCa,
0x01673a33aa5ED81BE3aCFeE5Cf8EB4A5e3Ad71aD,
0x7c1B9F1AA0f933102623F5819551E352730680b0,
0x17cb69c96607D711590FD35655838d3276C34B88,
0x2f4fF7Ca00D3866821D5e25050Abf15f4CcaE18b,
0xb049A501448aF3c38e612d22594c1eAD3844C9bF,
0x297d8bD01BaDb4cca0faCADefe0334dC901E3Fb9,
0xE11DECeB2FE117722d9e0F0d12F339c275e3Ef6F,
0xa7DD92eFb93f261B14d5ABC07371FD073BB70616,
0x8662195eF9a2A5Bdbd1c46a7c9e2b52599021c05,
0x1e7eC88Fe98190FD3533d06700eaF8a76A92b106,
0xfF4aaD55b9C096Ca239bA6c2944EFdDe8Aa321aF,
0x7CA000156Aeb29B34b8F92C112a0B2781b725204,
0x8BACd0212F0f6CCA1428986E0EC991a78bFB21C4


];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M9.sol



pragma solidity >=0.4.22 <0.9.0;

contract M9{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0x512aa02d454fdaBbe9953E2Aa1609aADC563A2eF,
0x2F8eF5C61f544C8374E7d51DAEEeF0EbB8224397,
0x673Cc64b57A87B2504f65Db4Eb589bB50c4506fb,
0xe980302f0d58506D3bb02d3B1ff1Bf37471ef5fB,
0xc8EAF2285BEE5B12e8B4b22956fa31d22544fB08,
0x953177C9570105E16640aD322d63481E69006E46,
0x9314a17b049b7030604639ED2335d34A30cDa502,
0x6af8b5aa8A8e1b2f39BA047C13DfA31A519c48a6,
0x7c0d2D31b86dB2f0A0065B56d1A66E554Ab9c618,
0x0cfD5c3B6517A494C5811673d565d8eceB6deA64,
0x56ccbbE0110B7d26b2E4781EB4727f933C5053B7,
0x3DBff1bbf913c85481D428c2837c3b204D58a26F,
0x79Db956bB1D9180C18646d03b359cfA1F6400DF7,
0xf8DC7b639af2c49A37FBBdBD2fE19612D44735c6,
0x3b133EC45445C609ECF90ea85d233AF285547Ec8,
0x0F977b5Cccc135e0d7fd52EA10da8F034549cBBD,
0x7F4B8cE3cFA7b79f3b2Eb88c16072E0B888F912D,
0x5AAd90Ea78669fD0CB3f287d84d5e4Cf2bF6a04f,
0xA08AbB12f6533c127fa0D01D24efa4BdfCf63488,
0xacF10491954b92a7fA29B3870eE8dB6bb0a07994,
0xEDed388d0D82eBe03B8Eb4eBB5Cb7c2aded5AfEC,
0xe70bCfA7F40FC54A33b23fAE9E0342CbD6d5b44C,
0x9A52478c0fdFc78B2e6C669d42294E6A9eC4aA7f,
0x286407D135015914e703Dd5DbFc113266f84b342,
0x71C797e6575F7be05985c58552b2338b54588187,
0x45100ea1aEa02f2FBE39B87Df1f3Ac0B4B20d8A5,
0x51e043a838295aa7F62d69c5d8ACfC61268222D5,
0xBf5b3D5B7318d1d019c9872bD570E8B8b44497E4,
0x84f684B292736B6ea8DAD7E137D880bE0feec2e0,
0xc3033f6f21D70d39721517eda48BdEd655329d69,
0x2403BdA81e1292731d68B27B66A09D60Bd1F233b,
0xccbDbb13233A6cCF5FA5baFE36920b5542A9Bb6c,
0xa3B8E8a5062D0650BA1f7a871CDE44888F1CE2c6,
0xC500e38c9b79e2B5C0f978705b3bAeDfe84b3cbD,
0xEEa12d5CeB2638066cB3e8290A70914e451f15DF,
0x758FED3014Be6E285EFc0DB636f9F150e154BbC9,
0x39B8140B4382f6E63600A9Ee97C3a96ee731314B,
0x43f61131d1b17D5F63725351992401FD02c9ECcf,
0xbE453A255Fe736bE1b8f633c1c98C7614bd56d8E,
0x985fE55EAaf159b538d778eb8bBa19ca8A165385,
0xfd1a427E6d93499e585397769bD937E6eA6521d7,
0x323dB0bE269b5017d8644c4EfEA893DFa7355838,
0x8770a6f8ABD5877c20c2049b1d4c0ADff5007185,
0x00C011F18dB62A7B4501970062202eC25d41A74A,
0x2EF82ce1b0462828283a23C7866E4ED84C9D5e47,
0xf4eB39F6d8B585e2bF7D4e0fFAa7fA895D565669,
0xB436C0e0197931D0d9Ce60AEa8CA8CAB054d615e,
0x02FFBbDdb2D960E0Ccad06130C078bdd4075Ed9c,
0xC9f836772B2d71bee959a7CeD018495D6EF634bB,
0xDDF1Ab4cdEB3067A3b18EaD8cCfbF5DDB6cf3Ff4,
0xda1E82E4B5D08A8A0eEB24918770F9546fc34a70,
0xbC4FAE52140D8797D6CcC8e03218909f331E2d4d,
0x5f44a07d2d7FFe176C7B7f63F848C9fd6DE5777c,
0x7272F06Afc711a0cAf1b8EaE712eb624D3a9eD04,
0xEe44c232B6d49f086fc3070294584b87CaF9C9Ab,
0xF6379F93343a78A5a6babBC1fcca3D6b7fE2CABc,
0xE6e2B36d322FBeC348bEc80b5A1F8C3375913b1b,
0xA9288c89E8Cf63958168303082D968C0A59C07D7,
0x9016dD44b8612FeB66AbE24C1e04D41f4083B0B0,
0x86f99CF7c8Fa35Fd7496816A9E40FFC0B2565EEE,
0xcc98A53BD33A2D04A975AD880E624cD5CEAa54F0,
0x4C23Ab8b415D67b638965dc4fe37Fe0286C94F97,
0x8b2993e210B9b36308b68185E9FfABBBD09dE2B5,
0x802688a4A87C594F03e44E5D1eF34272C8E059d8,
0x9A09C07cACD78e4246D41B17a1840956eA5787fd,
0x160F372f48BcF2Bc012778e5A18EAAf72f67cff6,
0x980a628CB5249b8D7EeA07BBe92De24522270c9a,
0xc54BF79c0a9d83276aC7bd68C1B029988d6a5D96,
0xE91905cb7702b46136BFc10113CB7E8CC4e11bFc,
0x4e49CE177563D38f5Ef89C8c64783545C2F3c444,
0xAff62cf4726ad687A3F7BC3FbBC341e63275A311,
0x6Ea41cb98E9b9AB7aAC12A37e3F4C9241226a1fC,
0x507BF5c14d91301F383f5395F28B6907137E15f3,
0x58523b892D40B544bB1f41f02DD7FF84b5f86c8F,
0xd7Ecbd7dA9C152240f42E7A640AA34D8301a7572,
0xF3bd187095801e673139b7505D279ec4771DFBD4,
0xC7f82449BF299A358027F6EfDf24bd69d94808B2,
0x54dB7fFD54aeAd12e1300D18e972c3cf51EC6827,
0x5c25573377b6d460f4a3Db8A8465019b301Efc80,
0x7b3F2da078Bd0324c4C04A6DA0aFD08eF71e1345,
0x624109A74428e7b12920C8B97423BC0bdA190adb,
0x6f241aB7A12Ae12D7477b13CF5F053b3d449d01A,
0x48D34E4B9DD65546585b2B127fC3dE6e1730a35a,
0xaBbD4445664c0a05ea8C3F566CA6086Cb1bBaD1F,
0xF9FeCB85a816B8F8758E5177E47b3aCc36E70870,
0x7b319176b52321d44c8Ea330862E92B89933dC8D,
0x22Df2E5B157ECc3Fa869360B1e7d053D385086d7,
0x64064Fd48318A9F92226ECab545d74676E417D87,
0x96dC773Cd1F239f4CAa9D621fbC0d1D64Be6a504,
0x97B9eeE6Ef0ad2424e13e03AEc7A8Bcb3980a633,
0x3be8cBAC390d51F2E7ceaAEB355BA92eda66038b,
0xA6a5943D0A4D90cE3730625aF6746B3cFfd24f24,
0x03e17e481C0C935824012D7D3E7d656c4739bb00,
0xe009abDFd5EA24AFE8EeD24Ca4C0ac47311e0412,
0x677b6c96378DE435E55B9F8B38b439124BceA210,
0xF53D7B1d53624d46799F58227Ca1022348FA5eCE,
0x669b777B4e4a6a7F7177521403e01F7D266985Fb,
0xef0B854C3837eEd54F1F48440177f55D4E70b6a8,
0xB3d90A01f82bCEB2322ec1e304df9aD8D945A939


];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M8.sol



pragma solidity >=0.4.22 <0.9.0;

contract M8{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0xB752A910Fb42085409C7D96cfB8aa724cA81a40B,
0xd4C1191760a4183133535c4F355cDBcb622C5cfA,
0x188AAf373625a063e86927ea506D13A792C1820E,
0x0eF2BEe0358bD0c46d24eD502F713c1cd22F7CB3,
0x492d239Dd9e2FCd8AF6A4E975dBB2176536185c5,
0x580673EE72835aD5c6d6Ff42914EbBF2e39F4213,
0x6F1925E1cB0F3931DfBB2a5a56d6D1203dB47099,
0xFC21100714b7F42e62400FcA86E85dE3Bd5d457c,
0xC33f43c5c3f9f724110BB7E0e2C10A8cc440D1cf,
0x4251A1102A1aD33CC27F988f03535aB8362A53b6,
0x07711d9aa470f6584d44865470a3A1076092D0CF,
0x6603403431fD3d918088d7559f2e844142DA0f79,
0x8eda4DF3af390603C2B46460D42B81D9499BC7bf,
0xf58A65498544B0CFF4DCae964d22F8397F0E7eC8,
0x701DF58b841A56656046B3976DE8f80BaA6FDe8E,
0x307A332b0728982B3661495dD0861ef6C8109E12,
0x7EF289AA8CdDF78f5b1004Ab1C5c57ba105D9d29,
0x51BB6a4bBCECEa6f579A12bb3608b81813B480aE,
0x318a2a5758E47d9a75c54b25aD8359443630cCAE,
0x68e4E674706aEDAb5D105d3D9BffDD11BD0E71AB,
0x5209565f7aF9DEbB0f674e59667e53Fbe0ce78D5,
0xb8bA6E54B670D77347aE22Dc07817E80f00109A4,
0x7F94794ff1D054e56Ea3173A94a57C297D5CAc96,
0xf24bdf560F62406533eE0fDFD5B745DDb33523Ba,
0x7C24513814DCBA88117bb0193D4E71373Fd1E844,
0x368342626Fd44837334E24be1716F7B54334Fe3e,
0x2b21Bdf8700095abc8E80a158D14f1bB0df1aDAB,
0x935B8433df70c482C861A872D4aD0c354511892C,
0x0c134FD102C5e21E87C8E2Aa9417660710671c4D,
0xC424f1520570AB0eFbA3610bC5504aC87b312cD1,
0x244b3fDC1caB71f7112C180Aed8E2BE3623B07Cd,
0x2cEECe641de19017B318aA513A3Cb58eb8246579,
0x5708059aEfE296801bF90382CaAf906420269eA2,
0xeCF25Bbe2443aF0860F7FBBa1bf5fa1d1470d3a1,
0xc1e03A0446038dC9619919c3D8eC93E9b6147896,
0x33b1bac6FCD21E035aaF2318a702c4cceEf99C99,
0xDCd794324d0513BD6c369da08C4D1802d47eF2f2,
0x5bA9073792399ae49bd72a605CaDbdB7C95A42B5,
0x15AC268f8B3dadDAC70bB46DaE1E917bF93eb137,
0xce420b3b3eBEeA0F1fC68C6eC40C1C6390818b38,
0x0c385b2277c65C9368E1186d5e077D93AcDb298C,
0x74D98f03b33f30AA787213849D81d80884820d5f,
0xa4e62c754A30b59CE286eD56cc413371EA5A5a9E,
0xC9bbf615375791E5848D435084Bd16a20b2f7EeF,
0xfF3D61D13692Dda0D6C8717cEfa8Dc03dFB9FC9b,
0xdeEB493535f9F1De0FAB1A0f8A1774Ea85956935,
0xff136f3c32dfc16ef7059702BF0Ad7AbFc7b1a5d,
0x364c1200Bc56C9E081Cb196501B9c368994163a2,
0x988cE72Af39ba14F6B138bCE2F6AF7Df1617813D,
0x51bC26983838019DdF11f0B9B6fFfE01416aFab4,
0xEf377BD4B74bb69E2401A3d3D3b61dFF81E1a653,
0xE73dCBDB9AD554a5FfBCc4608EfA4ae32C5ADCE2,
0xc1Dd1FB3F5D84AB7420aE9e0C0c0E691acd5eB44,
0xbC00F3214b0c7134c910D21d8B790416C1a935f3,
0x5D1291baC71f358fE65c1523ebF8CEB6De63B786,
0x00F53165A334B3bB1c058A4F7b8e3BF798832d6F,
0xeF1d0cadb6e62B58913B1bc4b857bc2F48661Ae5,
0xE1Faf2560f2d89105a30DCd778581542821DE93a,
0x693dC732dA9e695e374b1228DaEd24570c0037E7,
0x6846A726173895513c43B1a388923eb6a256eF9e,
0x9cf679564713174fB375f4DC8EA71c79e975F32E,
0x8cAEc42FbEa8fF18ea9CA5D92164efeFDb9fAf86,
0xC77956EeC2819d25f78F0a8D375E36992181d7E4,
0x12c492a9ddCdfCbC94ba595bE5d9E21D326da1bd,
0x59F552a3CdDaF0b235a57a0fbC5B9432d87EC747,
0xA75f7A5806E4AE581e789B912dB3B93B84e37a4d,
0x5E3f826C11dc549b6A5a9686Ddba5e0fc88182D8,
0xD8D2D5515A71660F97CE583ea9A23F8205e598d1,
0xbBE515E44E3845075c0a634442208921a753e189,
0xE335e6b2d9a3cBB92Eec6Bc42301690707E30B7b,
0x966EfE170887Cd5DFf23A43e3DbF77B9B88c4466,
0x5ACd208F2FEa53EFe43F3D0EDa4a3677321bd107,
0x9CcBbC709693412E76C8749123cf3f9e77529656,
0xddB6429A63eE97f506c5243217f1CB9BA0E7Fc49,
0x65F53fB0FEC078568064EE47c52C8060Dc0c3d4f,
0x5d4Da5734Da9062eAa7CfbA41FFa26379037C221,
0x47c65CEc252EFa90b17a8Ff9C38e8d522Aa6779B,
0x72dd083219dA3F3F90504f253878762D1E8B12Ea,
0x33ea7EBba14F17611E3B8bb4F5D9b7Ee5c226Df6,
0x2B32A4723863e4F55DdFfB7d9F20f27279E20507,
0x7DbAEeC71a9D56325B827D2195152C3cf977774f,
0xA4928c5bbFDDe73f44AC85E4e86076c37bd319D5,
0xfc0C98c3Bd5Da201eb49C29f50a44061A8c64F6a,
0x15110bcDde2d34BAb1D1144034eEFa2AD53Cd5Ff,
0x9CBDC03F19Ee8Fb46521C4815609a78bcFEfEE5e,
0x75Bb9277F7cE1E89a25FB4982b39c5648ea99F67,
0x1c10B6A3058E515173Cd29854AbE3Cf23db94842,
0x47F63B951162DDdb6Ef5C4427F40Ef84049f2e5A,
0x606c574A654325B18f94A0a541aEFf548683730d,
0x46Bb607fD6D4077C22Ec9af582Ecace21daB80b5,
0x7CD58564101eD83012EedA4552CFDce335aa781d,
0x56072CE2Df539035AFa9CE94cF680BaB674459f3,
0x0627300c5786A21F0b995F4ba1FF488d5B99D97f,
0x315e56B030fE1DC820aDd45368Ee448e9b047fc6,
0x0bC9371c7aeC231994Ab5DCB6f3788686c70C98b,
0xcf7B6c1Db9213B789949Ff27825D1C49Af04CDFf,
0x4B4465f98Fd72A173f393d7042A2Eb9428328b13,
0xB1cE95C542eFA772Ac273382CBb3CBeaAccBc7d0,
0x2471C6C7a1CA1cC3D61F75eb895dE1E7aD3d60Eb

];} function GA() public view 
     returns(address[] memory){ return ZA1; } } 

// File: https://github.com/SmartBinancePro/contract/blob/main/M7.sol



pragma solidity >=0.4.22 <0.9.0;

contract M7{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0x3Ff323B828b6f13b4c4fbeC46106Ed10da40bF84,
0xd24b97FDb04EF3e8770395BAF45b564042A38779,
0xD7d37Ee2A1050A0379B1e88Ac8eeE93A11A4E725,
0xD9108bd1522a5425762d2431E87C72dCFEd83b85,
0xCe07026B0b1e14FA4a7eeB49A7a337102ecdE8e1,
0x478aEc582707A686980c3e978ac7342D3E5e0Cdc,
0x3563bBb710a60D99E0AeF3550c4C6Ac7e11F3348,
0x3B13820796F1BE36e930b1BFE4ffa7F3dA4d071c,
0x5eb586c7129573CE40DF1e5bF6163c3B8E587067,
0x368C6f84258534900b7Ed0EE391b25c598739b3A,
0x98D3b98ADED2Bc30f740E6bab83c799FfB2402C8,
0xcbAc46a9C134dA31559046360fd697Df4e6eC05F,
0x7A220B44fE488F741d767FcAb3954Ff4F5028a51,
0x46B0d84387c0F393AE0442Bb503439D1970259E0,
0x2C23a2caD1351693258a001b517c9057f4849630,
0xda22CE2fa82780d1D61A55e034Abe1d72665E02b,
0x8Cfed076d6e6D52e0316A55DD951B1604764fCAc,
0x5523a7D1518D141F86aa46868E0026A5A1b0F035,
0xA2630d657F1df3f16C1743dfc0c76e3FE299D885,
0x6f614CB644aFF96796496f82DEC3F5382427E2F0,
0xbd5D9f5f1CE8A569d4694d5694Fa74D4D7f9Af8F,
0x497B51738415385f83DAaFbEE886Fc443d94DD10,
0x6Cd3A82A60A6E68A563f237F56772aC00a39D72E,
0x8E731D282CEf0d3e47e412C550dE4F91AF3A21ae,
0xf94DFb03628496ABC2cB0716ABB77E23120e01f9,
0x8c6537708F89451925C11AE5Dda3DEc4908ABB0e,
0xEb182C4061464197463cF7e10376985040248816,
0x8E4ab53923b0c36E016da2C0922c50825f8dcE46,
0xC74CA1D866578cd09011687939fdaf7D05032fE5,
0x3aF67053711b2138D483BE8D89bfA337F1ff42c2,
0x97619787369cF37F0BE9959A8b8538AB00143DEc,
0x4D9C356E64260E77BA55DAB7ADF7f08a348Ee5E2,
0x0C4830a125623F15a8b1AE8bfc1F91f32371F245,
0xF69E27c2058681ACbA5a4e0560E4bE79b1Ae0Ee2,
0x4E4ad69e38818763E8941EB21124bcf82fE29264,
0xBB4B6D8cD383Aa30c293A652C75AeDCA1A407547,
0x5928f22495278aFD03C996715EE3bcF7BC2cE51f,
0x00bb45B99C96E45B64ea96D7cC1BCFa1F89e0357,
0xf17e43EE2D591b174e8D2500647854425c45A458,
0xF20E7B7f0705CB71089Dfb8e796cE35b280D9Bef,
0x7BC88624Bfa5B304F6eCE2A9C16c99C014799c94,
0xeAbBf1b555fABD47dB9C72e8AB9BFb0f54f13Eaf,
0x6141214342C235feD506F3562E88e8194348Ac22,
0xFb3D77ddD2a0a250582AbC2E7437766E8C0AdBc7,
0xb03F3F47d49278A9374c4a9E192E19876dc98532,
0xc27D85A9807feEa461FD3793a2F0847dB7e20A06,
0x7D743DAdd03AD8e6167aA47259388B70D2b8f05F,
0x9d70CDe8cD5A7dd4218c44E5d6972B8141be648c,
0x7052925ce4d0a87FABeFe1a09305257D24616a48,
0xfAE68E9B4DBf3F44D87E1C7696e0f64F52D8D5a0,
0xDFAF668e52D9cd8B4F8Cb0c5C4fd2b400682C3D1,
0xA74ffDeEBb3691D8a63cCf9978b1Ce6a45aBe6f7,
0x806351Aac79D315d428d4B1a92fb7d039fd33F6b,
0x488A220C73C8F3E42Da2b0221A3D42F8504D5E2a,
0x59d4a01C7baB525A6F951DFB6F671A024848F1e3,
0xd85B6c748342c408547343101b60F579D2d9a627,
0x24EC091627d001679acE3b8d01017A9C420FC7c4,
0x27caD83B9fB14563eeAc51C68BA0b087d427edAC,
0x40b5DB90E406696fE6e07a0c3848F2438378BD1A,
0xbDCeFdF5Fa2eE9B77bF35C91b417FEE95779Af7F,
0x27caD83B9fB14563eeAc51C68BA0b087d427edAC,
0xB5045E5ccf53792A81F45f907aACB3FD7549e02a,
0x3279e25A219F74E11D2c44ba8Cf047b0825368f5,
0xC9dDEEcf082A4FF0F6Aac1789e962945E48e65fB,
0xe90bF8F3F40328769D7432bFf6340c88d8404a2f,
0x00e21f2B131CD5ba0c2e5594B1a7302A6Aa64152,
0xE4D245DF7912429F2dEb544B8a671cd452A3136c,
0x431430B832aa27d7807144ca4897A4d17215F259,
0x654Af36F8C58372b4ADb543a5d467B123BeafF35,
0xDaE4ce5FF3815e9542755303c65dC9255277100e,
0x91390B082094f38DC3e6204a723982d16F9FDD7b,
0x5de624b248d4fBA737DA87cE747D26AcaC4FD3e7,
0xe0fD852e3D3B24fD533122E67baFF95264172ef6,
0xf77aF59DFF41226E2c71eE3ea947227D296985d6,
0xCDa1fe003b55c4E4F017f0C58cCbB3FA9929c8D6,
0x2b319b8918Ae3f0D4f098Dd1034841DE3222a359,
0xD6968E60e8425DB3167F443Fb0dba9f02A4F83ba,
0xAf6301CCe8E4DA88883dfd15257993ca1970f056,
0x30A6459Ffc20B621E8FA76d150799E8389B520e8,
0x2822c1AE321C8492Fb771C0074b69f8205617A28,
0x3248f4A6Bc2adef213498a353f2c4F2D2bdB45f5,
0x7f8aF285A24Aa678e6D6CF35DeC9a635b4788801,
0xcf744c14bf14286344Fa2BbA717308DE90ee725f,
0x7fBB93dF04cFe6457CCF44AE9127EEdE729396E4,
0x797be580e5816023B6532D64531F5106279c1668,
0xBb23A0189683a0657C8434184e3C79956155b073,
0x2FE83C2DeFD5bf4c0D25299D64b8890a8bCF1a4B,
0x35fe1599F80D9e308Abb3c89bEa96B6fdD0Cb854,
0xD822051390590dC4560aAeE171e6aDeC4fB77A8d,
0x028e45c82C3a3f8f2b066Dbd78d172d77F49Db72,
0xC6a14f983442Fdf08AFeE5c12C1831207c9B3526,
0x82D09fC35fc3e0e504458b4614460478d1939aD5,
0xf5c09891d251E276e854fD026640cFe1fc9B451F,
0x6611d99C0d3FFd25CCf9bD1FBa536Df86e50C52c,
0x1bdFA3Ff4616aB50f16345098cF41C469bbaac56,
0xd1b4B5Edc144702d548cD7fA643A4A579B07d78b,
0xA82Dd1bD3AEB3EF873d6E4fee5b43FAB1a821bcb,
0x990593121c44e0Fbd26C3EBe59067aa92d082a52,
0x1187ddCE13764d384D10Cd2B0854943514D37A06

];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M6.sol



pragma solidity >=0.4.22 <0.9.0;

contract M6{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0x8bB18Bd4c7B45AC5815A71623Ff4E12fCd4F3249,
0x27c6c58c877B42C744Be3f59F4b2ea39861c11F5,
0xC466efD3c37B0124Ac818F2691A176F3b1FED9c9,
0x807170A805289e47349CEe5E6151e476bb0E0760,
0x7AF83edE6202eb9782FC658fdCE4133F18050A7B,
0x50DAed1fD20993BBf4E730aBccF4ec8f6013F241,
0xf8aEc8Ab4ae85405bC1F171175f5cB0F447f6AdE,
0xB3357c238fc2Fe73Bef0935ad5AE39817E44aecA,
0xA88e80DCc958DCB35C01b62D664752342a45916c,
0xA4bBa8ea2d1CBE2B0EC72604571Cf34B18abCfC8,
0x6343fD2b76BA5A2d6a4730762D98D10A585e5997,
0x3625270d4bcB4F7F0B5fF3c5200bEa0E52fD7875,
0x73b21Cd1dA7eaCD1883e05121a1c05C038d22Da5,
0x791F14e14634b9dc318C52a2D9624776357B4f9c,
0x30B7ADfE42dC6AC159639fF99d1b22aa46Fe17fb,
0xf1c8b83896d11645864fc5DCF0e87885c2917B78,
0xeF780567756eDf005CB1D302f186DFf4763c2Cf6,
0x4dA4eC2E875Fad6dB899DA9Db44D7a420F246d68,
0x7Afd8B90376e39083f602D990Da31db09936b36b,
0x4AcacBBeeADb7D0EB4677e49E422AA01c482659c,
0xb86D17d81A4Eb916D6d7DC9B51f06047Dd948e8f,
0x15Bf180b2cFA8a88180C6Da46Cc5A30BA4AbA4b8,
0x0B1F44e37254Be97d3402706EAAD48470945759e,
0xBa2D6159b3F9C27C80F065A4D0BaA4A6C34Bdd0d,
0x2368224a35bcB3f48235E43f0E58CC5642ac2419,
0x63e884adC56Ae84B954Be02bE9C7F916078Efb09,
0x544dDAAe72995C7E9365cAB9Cdb410517dea4D28,
0x1af84Da39AF593BD68f0645149782F3F2f5964e4,
0xdA5CC9D958EDcB3396aC6d5BCc7D48b60FA76399,
0xf10C80198337bdbE8405ada6E1a3812Cf9a90e72,
0x9FdE109fEbAa07D0128c89cb3DCe7fb4000D4F6d,
0x2e697dCF8853964f71a818d88aF92772d4B26597,
0xB73f045b726777c2777eC0f50126d4f25a8876a4,
0x9cf72bE8FCd9030EEC2Df5Ec67138f241324e2bD,
0x5Ecda374A1ee9786539420fA149EBCDf96136487,
0xd91e3273020595aFb5329B99976F397a5227afc4,
0x338EeCa86b3Ac0a9E0176484ddd12D2197576636,
0x70f39Fb7D3DB5aFe850Ec960Eb195FBbd5831E06,
0xf393A81b47b42C388f493D8979c48F69C3D3d668,
0x701CF22A9697AF3212EF58F9450E7508b2536085,
0xd6dd0dE2d13a8Ea40af2DfeA922bc51D21552BD2,
0xF1fe7b9A3Ac4B3d3C5817f2d554Aa131E103a33e,
0x39FDB51a13315A3B0A7810158A2A2e088F085c91,
0x2BD1e4E62Ff0Fbb6d9039298F2247EDf13968D26,
0xC1a6dF8A220D1F4Da33B8a8d6f7C1BB72085e46F,
0xED3e38eA6025eeb6891eb8BA80eE489A0049103b,
0xA65febd0223832f11086b6db8aCaa94EcdcEad10,
0x780DFC63064BEa7c493F56c5F8657468c9e3Ad72,
0x50c226010C49C53b39d4b190CfE488E481eE68B4,
0x92C57dB5D810ccC82cb5531AaE549250d3D62e67,
0xE6fE66F8F5979E59288dFEb82D0f8924Da7684C7,
0x14d85d953bCe3882e7ABa15ee1A5993502cc78e0,
0xeB2076bf667F70DcEfaFDA536dBA45687B6D7c02,
0x04d2f43deD6cacBe465C7bdDa804f45a962c5DC5,
0x428CB979Bc6326654E31c15881f472Ad03930C1f,
0xc11Fa5Ad748968Bc4AbE280c4C35096Eb6C57b40,
0x137E176eC0FAC81275688A71b6471610758cDc38,
0x1d1319940e193F75aE3836abB1e47834898F9AC7,
0xa43A9e36FcB9C4e8F46b8730c92C4B95d414B867,
0xe72b7F2327d8a5Eb0FE26562C13587E64c6A3740,
0x8761bdf2D3bDfc36e84cC461907ae4cbD867b3C9,
0x78fAf6Fb5bAdAe622061F5f89a7Ed9ECd0715Ae0,
0xbaf5F267b5DF6674776d2B53D50B599863eB63df,
0x68B6e5dd98edC555C445ec450DA76D7F6C6c6fD9,
0x2dabce4c5b2071f84F9E649372F6C6C7AdaB2317,
0x78d545dDd342F21B40BB34bf3A69096Cb42F98eE,
0xd8064bB2089192761eC173755F4106D2820f9D2b,
0x1592053E8B4AeFfc69F56350713eb0a4A63D44EA,
0x73C38Cbbb4B039eDb77A12A22d37969895263299,
0x8EB6e643Fc09b4D1C6819136Feb2eFd52F1155d4,
0x91D954A0cF007d3C822C55E272e769713cb986A1,
0x9b0f939510F77131FF62e78065581cdcD19c71c4,
0xF21FEcC391Fb5850B839f7888FBCAe04963eD064,
0x1213D7eFf102b9a9BE766B9Cb6706CE3c02d4E50,
0x8675185CE644B8bEA335709Ca91E93b220feaf76,
0x3bC96e49E96444aCA4DbBc9bC022DA2C987F73Cd,
0x164883753685e427B52eC0434C8B1E980A7cb1C4,
0x548E6c4D91EAB87A99D119A72ba68a5Ca2DaEf6a,
0xa54a9bC2D04774e69d48431b1f7E33392e665B09,
0x3ef3681318878C916c044adA597681be5042D26b,
0x154985Bbe59d94d886e8F19553Bd3a2c65877D7D,
0xB83C9D32348Bfb8E668e2c3c599Dbf61AF0e3899,
0x765eCB2d5255C1E6793BDC0e6cAe157f07B040b0,
0x44C5dc580bA5fa4e25d79383632C2C005FD33242,
0xa16B2c0DB3553463C3f293B16820CeF7e48fB734,
0xfa175C7F6eA9FD65179137675ae0ee5CE2FbEDF7,
0x32b22Fb070196540dCa6f56E43Abc0b7E85E7395,
0xEB41f88f37F3DB128E8257623Ac8F99dEBaCfcDd,
0xB686B1111904b55A60Be6798871FC852975e37B8,
0x0b48Ed09768Ca30F5352A438dbfeF9Bf81ca47C4,
0x6e6792832c324D591feE6a94Ab3DEA7Fe882fc4d,
0xf81650046Ec71aC0AF000a54968111DA8508B35E,
0x8C23CBE8A6EcCc784CEe56ec9C680402B2326cd0,
0x43fea5e3d56EEc48965566F308ff5129De7330b5,
0x4154C0f9015E8Bc8DF1064FcffE2fA828e393639,
0xfA515ADb3ba66A9bF4D1a60378220bF3d89313D7,
0x59B76C80558BC1DFd2b0d467Fb94a4fEc2aaD190,
0xc6885370E41a624AFCc9f7ac2f3068F684B81cb5,
0xb01A709ec722f79F57314596409c6Ff4a228f893


];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M5.sol



pragma solidity >=0.4.22 <0.9.0;

contract M5{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0x75DAEc5f6545D80A1f89E0d5B882a7AEdD8c0d1c,
0x4FBAF602FcA9f883A811EcFFfe59466c651a2d4e,
0x9915C9351C8316F43780d2DAfD16eb54F8f0F1C5,
0xB4E1009C0A78e13F1fcC5AbE7E32911E9556493C,
0x120C59f426f3b920Ce34B9DE32f0EC0B872386C0,
0xB1c91b21832d8b61a3201A80730bd2D6dCEc88CF,
0x1b1C7013442F8429E181070C6d420c089Ed696f2,
0x9992a9Fa2fb1cA6e1B63C014365AE2cCF68269cD,
0xA0Ff48daAe945345b453E263057Ea532904dcDa8,
0xd504158734063A8879ea56a8D81Bf2fe1ecCa1F4,
0x10f44F8cE199187Ea1294E78bBEda7c72e2CE727,
0xa00D6877A3721D776bbECf42F6391FD6c17064B9,
0x8d88133c43203aa80AAE0f3E70ef1B7Af386f59E,
0x475A6b5a278708B1e89D50b4a85365E749bB2aE3,
0x44bA4a37775aEF1F1497c293558D4043f5c6a94F,
0x06C57AdBf7cf9929F754B00e6bb3536a08f55149,
0x478461B07Fd2369239D15c92B7714195209bD22b,
0xaeB659366892c478763A0DF8d5138bF5222ca883,
0x985771C7d1202eac9904e2307e519DAA28FfDD72,
0x549461C2DE120d7e5E4D5CF3D2372097092Dd6c4,
0x8E4D7413bd1ad45Ee37930fE763236723f52F6e5,
0x9E4f7c62eaef8c14Ddac938F437D1737a07859Bf,
0x77B61FE4723F9C70B9cb310d18CdD71A9AC5Eabc,
0x7D60553d9fE64aB3f19B4C753747920380416630,
0x84f5517c9FA852Ad7FB1CBa8e9c874f094093A66,
0x800b5Aa12952cC4F3dD462c516e228506E73F49E,
0xEb5B628ed5de4d3e4e331C0232d6db6071bfD4cD,
0x7b2330B221A6A923dDD895020474AFa6540318f4,
0xB60C677DCBDBcFA57D3Bc07Da42766A09C810225,
0x545A5feb1d1a930284E18Cfd31633b8F11D972b3,
0x441A77bEF192c4D6Bc0F214D8125344887609cc7,
0xEff00fB61a23860769a3C66696D18D402814f81A,
0xe16a77243b1bc2895C245e4A7966A090543A4f4F,
0xCA9746F116daDaafE14fB0Bf91B6BFB420603dcB,
0x21FE44a55586528C45B089a38F9370969E220910,
0x9591b3e3D22d37ACacA661363b5f61da4F2c91d7,
0x05bd0EdFA925baC9BB403310057D037CA862a762,
0x47C816e7b941C8d5Eaf82F060b01dC10BD4895eF,
0x47DD11DBd7b6D243Da3df16E96534f6731fb6C16,
0x3CFb103Dbff0ee95BA457a0357C8CE955483ec2A,
0xA0f21A7e7D02410Ee9fc334B6Fb39218D53b2c9a,
0x4C50e0C3F1873e3dA56EAdf6C526Fdc8c5ad9aA8,
0xFB85E690d229738F508ff917688D5914e19c9Fb6,
0xD5B86a7ee4224b4Dd426915CFdFD0b76D056F78f,
0x0E933889898D9169205FA170f774cb3F20D19d20,
0x2eC45e84b03846900D283A2D976e11eA5Ef0e4aC,
0x6EE2D3cb2CC7D6f322e05e0c780d4B6AC8126294,
0xEb7E97C6E3D0A36A3a31da5979aBbE0d9Bda445f,
0x8cC31698d8202806AA7FD9e80d6eC1b1Be41CC09,
0xBcc01F9c7935e7aF856d6f142f78fB29B4A07b4B,
0x036D698e4BA1B6EDE0fea26abBD0Fd9Ba3C86676,
0x13415562Fb8215b6120EC269d4B2fd0145d91e6f,
0x37f0190E6cFa2526Cf94Ce4FA5D9224C33fc7AF2,
0xE07554d3ed4987702339DD9ADa0D4fe9A5881A93,
0x5f46BAceEA1973B0c92C33FAB5a42bAA62FCc1fe,
0xEA2dF64339866C039bFbA3308745BD7D602723c9,
0x6292065195B83366cC0F4D0AB8bA84C67A9092eb,
0x2469D313E648c6d8465684810E2F5646fEF749A7,
0xE806D8Be64958A671D628BbDaDF6052B011d71C0,
0x8A2a8Cf98f56f553C31E1C10457ddCeBF1ba514F,
0x56398B016a6336785f13CCf41dbDDF06C97cb87f,
0xA874aD7fED395660D119aceA717EAb8C7341FAa1,
0x135a29FB10b3b8b1c6FCc3c46E07c164ED6357E0,
0x20915A5549244a1F2a4410503EB046b03585F2B5,
0x280D93bE59dCCC857F1c7869a28Eb41a1592309b,
0xe0c4A5330b5Bb423B30739f2A7dF4Fdbe65C2E79,
0xd001e8900D206Acec15FA2273F16Ddc34f355752,
0x7b6C6FfD53a609F366Ec8f3a6f6E94BE8a92795e,
0xaF642Aa6D584f3425dD1b117b9d08C6c820c2DF7,
0x32e00F7543ba1D1F92b71deE82C76383f1D05538,
0x0ECc8F89B5C4e2A13C4693E831086b3B2199Bc1a,
0xFadfe56EE461169e7BE9Fd211Ab541438c60d8C7,
0x9Bb9bE161b7D00ceCB81C89fA74A2C9a526Bc0f8,
0x1C74fFF2fbD1968E1FcA1693E3ADfA2Ba5DD018c,
0x933E537a94952ede6c0bF6A30cf7bFf00c489348,
0x97ca33F16021A6e3c82Cf63175Ef58F9d0C5a1A2,
0xA3c8B54d21899398465D5CE5719f0E28d6b9Ce65,
0xE60Be587d7A47D060c5df907A724CADBacF76f1C,
0xcEAa06c431FF7b392486A170ACff046Fad17cFbF,
0x8e9Bb5735329a88E1814c36eBaD5cF4Bca6f5228,
0xBcFE9BDDFd16F562De5b1c67D3e9Ccf74b9af377,
0xd8c277DFfdef58e373a64807A03d7440a385e8C8,
0x3b1A1346d6e9ed7fEa8b60e3bB95e3ef6050687e,
0xA29c22A797c5cC516a6747bCaC24DFFE88d14341,
0xE37c82f23A4aBB1D32Ec6AF4AC4881137AE7EE5B,
0x9c7Ea742584cAd4c2C14eebee27851221b39FEb4,
0x2e231a865B0e85C9e778f61E7993630b1547CE08,
0x94075A5ffc9DeE5880c6A85fa9F71eDbE0C09514,
0xEfa61f617EB49f3bB987609a498B4475096c2D05,
0xc5d09D7733714ac8927FA0590C32e57E81Cc14d9,
0xd444e4F009241AEcC224e128bCB915bc466D99B2,
0x00f7f4dF1F865a6fCbC01260B725A86D3EA77102,
0x9E92934ecadBA4457C97A7F4a3cA31F8C504699C,
0x38AdE30FCf537ff25A5eEE44bCA8E0c2747fB766,
0x121f7898DDDc058e19b2297Ac3c16e31CB5ac344,
0x0eA45632EDAb548CbAa41b0eA23a18bF471aE1ea,
0x4b35fF6B36aef15DBB9FF3f18622182A6AC1445B,
0x5d8D2738ac6C7f2551bB27D05c549a14E37F23ca,
0xE42114279182284604182d43aC0Ee40E18b535B0


];} function GA() public view 
     returns(address[] memory){ return ZA1; } } 

// File: https://github.com/SmartBinancePro/contract/blob/main/M4.sol



pragma solidity >=0.4.22 <0.9.0;

contract M4{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0x21c4cDAfe91F10ef7B3842a2C84c2a2925d65B11,
0x6594514564FFf148A9E4b6E2A7C1B07Dc563e092,
0x9d1FDBED823DE883317bF281401Ba5Ff76202B98,
0x532661a5b4452027a25Fda9C4B4D68f19ebcF5FC,
0x6326B4CBCD5A8BB5F4f92F1b56E98B8905722f09,
0x494Dced573955Da8D5208F603E7bB51f124Ef7B9,
0xb0a6F014f977f8D163a28343af8000930e867801,
0x73aA459f43D4b0b5C342C88cC7F96408c8A4Cce5,
0xDF0B3125B0A4c97D70a49D937de8df6663feCa95,
0xFEa1493251e93cBE082149ED23a8153eaAFfB922,
0x3613722544bae697307cB90A0A8EbAc61eA752Ca,
0x358bBfdCB81726264A8e54b3BdF590d83F13AbFb,
0xa9341fB816de6ba515af1955a8Af1ec136e579E0,
0xfbDDa31a789142C09E4f4842182CbBE6f00d1869,
0x9281E7B51D94A812957D976604Dc2FA8FAEa5d26,
0xCfa2cB1Dc0cb78A5C126911258c6c1848929b987,
0xD378f91d61B9E6AFA69A31B502bB214Ad4029bF5,
0x3dee5D4C9d21375c6dfa0710c28681F547f618f1,
0xA85a2e19171c7a22C7CaB3D0c2C8e5Bba8E7106D,
0x398BE09AcD32D3fD8735Fc59ffAd3b39766DAf18,
0xFEbb445C6881DA9570ee3571DAF06Eba710AeB6d,
0x0FE3e2561E01408c2710CF97Ee2aD90B2cEEF83d,
0x27B96A4784B36fB03a5453b2aC0886C3FeEA4628,
0x9cc3973426Be94CdAF33C813602064FD1aF5ffb5,
0x36A18dF364748377B242D4C5c813084a4a8e4F1f,
0xfc20d36CEDd4B9EA8B5ed8E314d9dc16d43e202C,
0xe8e4bCc4dA27890B58ca7720E4837bC13C2d920a,
0xeE7BC8561a86f9bf477bE870abc263F5C1f53d22,
0xD0b6ca173C4eee95e8B781e04C75ab68B0017001,
0x22AE490c8C0720F2150398443D1850D802417a73,
0x8901A6f86f80a16063c85D91736f3e86DfAdB6a4,
0x7Dc9C5BFC9bBb36C3A0ccddc41020bDdb1896730, 
0x3B8A020155e8f67F10cF0F42a478217c7353Dd82,
0x4e41c297BFB14b9292Ef112cE347e6f1DDAaf68f,
0xA6c1fBE4DD2Ee8C648060C4b53EAE8De529449B0,
0x862BCB22B04248e83bf497B32Ae96b923A11B5E0,
0x9c01B82aA81C7002939Bbc4b670DBabDfCB4B9fb,
0xeE25DB9ea6Cc66BBAD083FB29fCF4a217567850e,
0xD181f48A74fc764488cB6C290B72523E4A2DEC57,
0x049c5868ce5F88745f59Ca87a0EbDb10Be03031A,
0x8c4248D754f464c32E8871CD1265758855127526,
0x781063AFA3234Ea77fbdaeaCe97F4a3598f0daAA,
0x5D0428C0067bB56D76bc9cdCc16cba468f0e1202,
0x9ECC5BDdEFdeFCE0b1eFc21E49A26e6FD858ffc7,
0x8C6C62930BfBef1C64Fe148D0300E68D5d63A1c8,
0x09754cc21640E35Da4B90866a869d9f3074d2B22,
0x03585870708EEf32e01fD8BC6dA500033e66a751,
0x166fDf3346C686F9c5749242b4aed61b607b7Dd6,
0xdc97C4d521ffb4033E091A64fbA6752A96E26f52,
0x3F100c89c6647C0EC66092c99A70304A0BE9d07C,
0x67Fd05047369fD28764bE5c94cCC3d44738ae909,
0x6F197d975840077FC3F68ab6BFB5789be0679B92,
0xE7086614548392bE2E05f8b7aEBD72c307a5c6e3,
0xcA2BF6e036E8366bEFeb82bff50c64727164a521,
0xDB94A8A4f08B760537a1321B868A5FB86A4538F9,
0xb2B7386b23A5557f2C9A8dE2Ee3eE278D2332398,
0xe0028A80b2Caf516A941a04701Ee2DEE2a297018,
0x9996afA43265b6402B730e8672E82CDCB75a4265,
0xe1da457A539f04B9B9604751fa66C641cabDD228,
0xcFb1862a0AB3ba1441393373A84fd062FBaC6532,
0x1aC3d1D41b6C4C67D25335019DfC0cE543f61f0b,
0xB5363974c98A132c9FE28B34E5D15fB4384211e5,
0xE3955eeEeE03D712aDA24f3C57B5fD79D2809698,
0xc6772d00B31a846686252657F3bE9018d2B1171e,
0x3677Eb6410cF21330306704aa83BC3F0679baa1e,
0x0C51D5087b8CA0b49C050C0b1328C54Aa6E9d63D,
0x445067d726a0A96c39D5cDE585f3570673007402,
0xdC03768e53ac97F0E9aE4cB309F4eb6fbA04Dc0a,
0x7780D47e05D3B8b476c0bbf8f45283C6e1071E81,
0x85C7E05E8e36e928C8870B712cC98741AEa69393,
0xa6dc305d198776B141F42C356A226B5a357C7851,
0xe38e0370F53C674AC45a191443037750f24876d8,
0xf8A96a7BEEF1c5BCc0142931284b4736D9fBd75c,
0xb5ba7680e6eC3BAC4d31bCFd3eFDD529E6cb01C6,
0xf6650150A1Fc140558845a478f8F6456Fe6FAbEb,
0x1fD5B38181139aFb3e82F5581dCee65c112f41ab,
0x462e07891B7321808C3219bf35912b269B6edc8A,
0xBE2dcC6292CFc4C9485714EFF99ea60D3e5Ae669,
0xD268AE3d1d065D085d7Ac61567946Ac5d2ACc362,
0x01DEDc15a9e18eAb586d06AE6150C8F67c13bE2e,
0x73788F4C2121d79DB16DF62721F481d57b60b568,
0xeE5c5D5B5696f3c7f3a3615a3864327C74cC6de7,
0x54f43A55aa9F1ad08A2e2401793D904972456312,
0x32Ff963F9B779cB4a5148bF52F9Cf3739F5Ae8F8,
0xb2347B4eD6214B238Af269C08Da6Bf8874413F61,
0x6d2D5DDe2a8B9bC683BdE8c19Ee3fd4371AFe6B2,
0xe27E56458E6E9594B52ffD6EfCD5eeed47d3B108,
0x539D0FBfF42435223B1182cdEAb167356ef1ECD4,
0x9cb3074E6F7f46b87494FEAD45aa186e0beEA8A5,
0x37ca1255a0e312A6361877D9Dc305B5E747ddB73,
0x000fa941f36196926e5aB2928e8864836A7F02A4,
0xB6Fcf0B3ed852E4049d24fBA34924782957644b8,
0x6534F427757252a4cf59D51f04579acd78c6B850,
0x58fA11a71c5094d7001A11Eae8d785EA2DF2a1D9,
0x0851aB2Ed004ED9954Da6B984B8E23aa580715AB,
0x7092Bb880e517bbD35B0f73bB6dfF3de03d89A6C,
0xbB247B8a43CB543104F630d57feA6d3622834D2E,
0x872aE34479b18a2560880ba53bf9d0A709D3625f



];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M3.sol



pragma solidity >=0.4.22 <0.9.0;

contract M3{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [


0xDdE5A8A5f5a3dd1DD366D254286966aaF30b15cE,
0x87Ca38825D21A0FC2C733dA7f9f150acC3eB347e,
0x87Ca38825D21A0FC2C733dA7f9f150acC3eB347e,
0x8b0058eC4Dc9a346Dcc1cdfFEbBcDAf44A8A5b27,
0x40B97E34bF576D78A52025D3947B8721BB887F73,
0xC22228c760B80CcA233e99174B8375Cf7fb7BaeC,
0xBeC125B85F0506cd1dbda6b836fB269a3b36e5d5,
0xFd241595b8b96CC20Cb2e31a4A7901f8E4Ef478d,
0xE4EA5B8361DBC9A5EBa15Aa1B8cB59a150E3b926,
0xcbC394a18467E497d5491BC8EB5f7ABbACA7ee7F,
0x0b6d1F968782A642eFf077e9b717Bea91a319d20,
0x90e8601A5FaD3626f8379E0F9b3F4d0e98B063b8,
0x40Ec6bB8357fa4B4cA80761814F33E09312F7F9E,
0x183E9579bD551Aa0933b2802194DAcB106bCd6e2,
0xB97bDF4D97006ff7328cc626f9A58945F7dF94D3,
0x0cf335d3A5b246736F3ac60f5bB5F45D267651e1,
0x57AC0954dd61F46eBc0fD9d073bAC160847b28C3,
0x0C0A4aC595a219bB03489Ff45e365E832eF7a989,
0x356E98d5E05601515834C4C78eAFBB4c023DfA48,
0xf2efB658961b5c60875862D185A9a2C7B78592B0,
0x8b6D0dC0cdCB53ED581D694Ff102D4863454A1e8,
0x557AD409E65dF3e1805E17615A0d72535DbB90fF,
0x4C8349a6fc6319d9c5A2E064CdfC97c513129c18,
0xC2ed235bfDaB9E0Da1c63A8Cb4c00724Dabe2C60,
0xc136cB0EdfB3E790efaEaD2E2f22De19B4A9071B,
0x51870BaC70D0B1113f7d6c81B0A255CbEA131112,
0x0fD84c62d1e677B8c09CE4B118D5C1e9a0966Ae8,
0x8036f0E62F59F96e3d8bdc6524B61F670BB71368,
0x741F8dd63364213b74eE3f6b9b8A87Ca4AC10Bd8,
0xA86E5bc348827dEa632e3e678fc434E4Ae5eE0e7,
0xFDc61645F8Da51cD55BAa4AA1BfEAEC715273cA8,
0x52C5190bc9cA25b164b24adf1DE618D056F548C8,
0xd5eabC219677b0290d0c1679eA491a8b1c3F4388,
0xB34e76aEeeBb2fBDFd4F79B44b0456C35692cf2b,
0x109dB8B9E2B7849ce8CA5688e9c0d7Ea6063796e,
0xc6B1D663a3A896A4bcBB13E47b1C5f463d157Fa7,
0x2323d3046dd40C3FEEe313632028c5871235070A,
0xc358a510198c96dE580dF0a025575438cdD0AdbC,
0x41a3c175296eace8d6CfD04Ae118EA1b0002b5c3,
0x640F3438fc74220C6576bBAab75A89449dC8Ac08,
0x3dc744F949e636C689f01A673B70ecDAd607AC3D,
0x016B3EDFA1E94123cF17A4Af8fCb8F7A9c0a6169,
0x968E79FE717F0D0ddac4a52E855841dF540503bA,
0xBB88d860D5AB53Be61f6d6dfD6cB9Ef278cc8377,
0xf19A7b8c8f3e65E0422D019d50493A8E94115f1B,
0x5821516eee888B9d800C0B630041aaA121c5821D,
0x35b27097176cD1DEA0e1Ed295047093C75421616,
0xa5651b6Ffee6B69D90C89EB0Ca6c5322a08c771B,
0x83004A2F71F3A8E403A6F646472827C26C49EA0A,
0x9D82c460dEb9491cBB0f238bacE88E1F36F93C03,
0x9bA2C7DFaE04453891C31e326A84eDD3B8e35E58,
0xb28a5CdD057C84339aeBFeC1C02583e8BD652436,
0x8268B143804EFb6Ab3E12d16a6872B894EAa3b12,
0x4e602942613533DDd27BdeeB090c07bE94a6eF21,
0xBDC20109a81F3B892144e6Ad22478B6a4f210aa6,
0x47A48cd9dDAA7ac8e855b5C36fBde0b928F66Fe6,
0x0508A18e825900886505486082894138144b4461,
0xd57b7751Ec93A431A3dB14892dD67f8e638077d5,
0x8513844e9cf778451429Efb055F59bdf2E8A84e5,
0x10798f8fD33F8DA701d59ddD973bFF5Fd76545DC,
0xf6132D3bc9CA091189aEEBc0f6a60dAB82E54788,
0xCf438Ad92D193374CF589d4F5Db54F46ea6f711d,
0x89Cde2C2814f780D2024490102F698D414fd3491,
0x03805C7f530d3f33227D993Efc9913232Ed22D72,
0xb04b2bD517826d47efd5f41979B0012923E3D3Ac,
0x8a9a0165E0EFFaEE8AdA17843e092C737aF06125,
0xAB6E0552Fc461dA53bA4E1297f9eAeF415fCaa29,
0xF7Dd9589525e7169504D2D52C62442Ca6cecC2f0,
0xF495551b8872267f1bE20fe08c615B4197466b60,
0x2AAb2899815e405022b27E2d8cEF0AeDc4D4D8af,
0x21447a36CDB8d226d60C92728C4cb48E238F27e9,
0xA727FdB45Ece340FBD464b0045E0B43Bfc8e60da,
0xD2986B8d049fD8395a2be92E8bC657EdBC615D46,
0x4bE69E87f133003B762E004419578FDDFd5Bf58b,
0x5dD246E2e1E4791378bdfB0eAc4A9CDA564F645b,
0xBC3d7921Ca4c011F4E89639Fc13e6a17C0F90702,
0xD664D9B52C3a2Bc63DBe0F3f4898E1C60B05D230,
0xB4DEF4C5BB93b218F5533e650Ff1bC393c7e5256,
0xeA67da11956b473B89ead7B8e72bCCeBde6722a5,
0x22994cCaFEE7541db1bA6E7Fe9Bec815A6321d08,
0x49760277c7AeDcC7C83E171f0ADf972A7235b8b6,
0xeEEe1B500Ba97b9806FA6DFeaC1FCb6d5666e139,
0x2A64F9E9796D6235D72BdF33Cde4633f60cb871D,
0xF9b2B8bdD755e8DA29c6481Ef4F3BE287Bb16009,
0x1435C3a8303B5d6BCE56298500882F6D9e4dBd96,
0xfe8b395659F09637a27aFA277a4DEcCe8f13Fb20,
0xdb44Cd96d11e01C93BCf1b688929BCd947ab673C,
0x209A0BDDa602A6027124580F41Fec85F14e70768,
0x25f0cBA97082CF3eCfBB9F27193806a312E984E5,
0xc9f036022587E6F5F24234ebe7b7b832644B6cf1,
0x630F7D376b78d73451339e6dB454aA8084e66Fd5,
0x6b8410eE4723885258fE99321fB485c2EFAD057f,
0x567b12c3dC373fBDAd54b46bA1Bc12f2A58fAd4c,
0x80b41BD9330ebB9FE309E17B02a46319b072CA0C,
0x8Da33f6883a2230608b59cc0505A82BA986d972E,
0x8BEc655F41B1E29451Dc539bfDc7b51287Ab44AC,
0xC63c54ccf82eC0d80D19AE6bA210fD45704F6bA9,
0x657a0989a556955D8b47545B338db2C2Cbd693A1,
0x1d081EBA065D2F374F4C03B9A1A80c698bca5BeB,
0x2449373253d9bC59a8fc1827E4DC91B6606E7D3E


];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/M2.sol



pragma solidity >=0.4.22 <0.9.0;

contract M2{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [
        

0x5262f5BF90C42577294dc225f2A335CCF16f32A6,
0x716E7E6172Eb0e6Dd674557f7687A7307fDc097e,
0xd5e3dD5f7C2B9959842E12e5ABFfec1a77aF6bAa,
0xC4FBd8B6f3c53dB94516D0Adab01Bb7c930A8054,
0x581ED5Ac7e9BB5b6351F25636d9d5Cb07A205678,
0x5b17a027C52f43431853fA5F138093d8A96D8Fa2,
0xfA504cDf4ADF99f0f59A20C607b55d883C42A554,
0xD3b71be5c51460F30F3A3e5aA1297ADae3C3A6c9,
0xd264a47571b44F65986E973f172B1Eaa19702205,
0x9b4f200a8696650dba1c1295Ccf01A0E4892c5e2,
0xd6Abfbbec47B2A463E1Fcb394D3EEDdC23f83bf0,
0xC27EC64875E883D8250ec583A7E5799b6E511f18,
0x457471aEd3c06FA5657641561C5d5E3cc288B29B,
0xdD0d0C189837548915fD6cB1E7Cc3F3E469e96d6,
0x3D503da10661E830A79B305C6462976C85Ab7464,
0xC92489f0299AAcc3bd1F49Fab8991da3D891239f,
0x4E78E6A39202A897e167fc940d4BAb367312B428,
0x69f9f49D4E62f64aF9eD44328E927B093D2CF983,
0x15F64C7d9D1192416C5367a57E14a1239e9948F2,
0xB8c3E114E12FbF0ff64B096332BD3007dB44b5fF,
0xaFe3a791Fc5856915b29823ab62C77405B4329bA,
0xa9d628fD35391b59189c44Ef9EC1F9037D390874,
0xC75973909916420E51F40d81cF51264bFF389bfB,
0x9d5Bfb947C92FdDBfab6C14f0e9C1AdC911c6926,
0x2Abe396bd029a95226e9A6ecC47e03f205b037dF,
0x269A778fD039b5a01098fB51b6E9b755fDd5FdF8,
0x48cB26A8264dFD8Adc1976ce0bca4cac7d5a2e6f,
0x3A3F31F8D92a96AF009eB7606609bDbE7d9f49F2,
0xf31A08AcBCE6182A6E077602A61859F77acd9dD1,
0xD0fe47ab4b21f603f132C89E400B2958D805456B,
0x267948320C44e87793c4E6051F5F1bC39Eb00D33,
0xeD378B4fA3FE0f7Cf9A0C90B50c68D4A76Ed9cb1,
0x1829709eF37402581d1D1feC598Ce132da98B0AF,
0x1a99977a3aCcFEa764E540b356665D6417387335,
0x3a85A4504e9b30f8CD623e68053B4Fae13F06cF5,
0xE5f798d0b37f7413CDFdAf35438a3939Abe4bc27,
0x9F84998b4c2eB171d1D522bEc80cF788eD5ed6cB,
0x676e1d29292Ab7e21Bd43dEBa5126Eb46CE66F05,
0x41D9Fd3bFF55dD45F3D9D6ba621cd4bB61C91a69,
0x25180676A2de47883C0CF5Be9fDc09f64B6C1E6B,
0x264c0dD14852B9ce52eb59E922539ACf59e1336D,
0x856188EF5167224EAd5547C35bBC6b0170EBaAF0,
0x02bd1ceDe10dB9Ea27b986F65a51abb51bfA9798,
0x479825675027a227d9e00164e7b33382bf660f75,
0xe3df21C2866118895acD4D008531CE86c194D776,
0x7eA479a78CAEE0336F92635a317185F87D2D2C1E,
0x61f78EF5B5FfbB7cCEf73928F58808860EB1300E,
0xA32915C044dF304e5024Fd40FBd201c8A45d6e20,
0x7eba174c39D70129d6D45cB4C1C494cf0fAe7C30,
0x030CBB243407F820b23D84FFd7957667e1BED5A5,
0xce5743fcA10b8AF4aE0535d5670CaD4dDB419409,
0x4000d3026AD9E83B385DFf7ECE2CCA1DDF99Fa94,
0x8482B6C6f3b47bf0Aec9441De62f09C886456BA1,
0x7619f5A5101d86F1fD7609b1656828CF0C670aA0,
0xec5b82643CC609E576606C9dac0Fe4F4266Aa308,
0x12cb9AEA7f01c0405ac7b761e3e445b5AEcdd766,
0x9dE3a56C66C22753cfFD77Afa8Fc5685F473378C,
0x1484193Ae188A31b56B91C1e2ec9658D09905066,
0x3e59000155679e529ce74DEd0E7837477a47824A,
0x7007E85551A350BcbF3c580e789fd0e40747B76a,
0x3F647538395BA74d8F3EA67673e5e3234e4C949a,
0x888990767C885edCF665759Aa82a1BeF2d2597Af,
0x808A0333F02356F77a2d60CC908Ac61735C3417d,
0x70E7eDd88d3186546630676AC86598976bE6B91E,
0x00BA32C2AEf1eE9940b157430AF8A311Fb708A40,
0x393166353F8FcffB7c4263ac0775de4D3500dFc3,
0x3DB9A21F04f119A54b444c77a301E75Bb88757ab,
0x2ea21d5E62049775513DBe42F1E98C3cAF057f7e,
0x1C483D58505Ba8dEed14058f0bC999675078DF4E,
0xE166404922836D0f51255C15933e776b8cC4F250,
0x1081B174E4fC8CBf0e65bC2CF4343249F159308f,
0x4EE5ea290829D4A33a92cf77b5F67d10BD34CdE6,
0x457776e381F46940e4D24e0D0eb9dF1587fCB63b,
0xcc82dDeEd3705755B88B96fFc25a934CEaf070B0,
0x26cf5118171e4FE41fF7559c89474F93809Dd603,
0x43823699Ab717D603E90bAba839D319924163373,
0xe7a5fA51Bd96A3DFCda17a398c5F73Aa80C32495,
0x6FA5effB4E6F7a92c18159A4F9cE72D4b5D1Fc7d,
0x281CCa5C8cA45414A31CB724259263ad4dE89C8B,
0x596A16270Bf80934b1Ffa16EB8980162525c0Cc2,
0xF17f230d10Accd2b2DA8FafC17a76eb1bA269866,
0x47FC723293C0d7E46f9Cc8337B369379857Bb5e9,
0xDA02a07ab60c381b12b4659BfEAEa23B97741e73,
0x4e9F14EE7Ca63ad624757c57f38fd781f15Fb24e,
0x2DC962c3c9B91517B10B0B5d20C74427b05E4bbC,
0x9318A5C3FB9295d153aEB3AA3b11cE92D7cC2f88,
0xD3a3Db6960674341a1aF11B327D2FC30940C7476,
0xB5EecA79405982858809dECb9f2a65BDF734F582,
0xd293287796c63184a13190b25F1431ec13Eb6B81,
0x0dCBcbFe389e20928Ce8a64865c73A57F15843e0,
0x673E1F9bd4e4E24CE3194Dc53f78D8f91917DEaB,
0xaF0f980c985D4D082B6dC593B51AE2a73F14fA32,
0x734b9c5e25dB4b37844393CE89Dcef28d416c6b2,
0x4C55B5d98A12Dfb746F67A308e16114F9Ecb8fEe,
0xdC85F173531CD2c38337aAb628239536D1f56315,
0xCB2C142e67382bd0f4999133f10bC17130B959a0,
0x8d40CE4BadeE93077a78f4b43d9D5F1F06D8Dc9d,
0xd36101eD2bE14a609dd20a8aC33e609b6255AE7f,
0xa0dEBFC573be145f5b6Eb48ff6C75aCCf2aa907C,
0x0c2aeee89bA5bdF9f3dBFB058972438b0547796E,
0x35f7250DE7D7aFBc4A16dDC8e161C3E4BBf85ed1

];} function GA() public view 
     returns(address[] memory){ return ZA1; } }
 


// File: https://github.com/SmartBinancePro/contract/blob/main/M1.sol



pragma solidity >=0.4.22 <0.9.0;

contract M1{ 
    address[] internal ZA1;

    constructor(){ ZA1 = [ 

0xfC58aF80F48824f1a8DFd58EeE72C5E885f104C6,
0x0D6A1A71Ca9C6Cf2662713907A0168DaD6E456Ad,
0x648E5defDE7CaA4929880734eF2D1282F9B9B205,
0xC1c79533683DE3Dc35aC944EF1d5820599DE5Af6,
0xB6861407Beed9f71855b4596B1970c51Ec25fB94,
0x51D3058526a9A224641cC28bA89b9caA9Fcdf48A,
0xa8F2463B15DE97E6e25A76A11A1a248592C809F8,
0xB534d285eBA4503892039fA073A97299EDEec68B,
0x229F41B26259f788404326CD6f5b5440436f1E6F,
0x07B7292B92e74910Af435dB1E74d30431edaF7BC,
0xa8a0937e58B93f3EeFfd1DeDBB7EadeC82A21051,
0x458c46931899Fd3d3aC03D45ed6A2ebd1d462a73,
0x0E2cDF53402B6f1E01746f4860f9D41502362c2C,
0x71bbCC3695D2df845900f0098b9b8BdCCCC83521,
0x8Ce88513CE7a038e9C74617af01CaE4e26eAC13B,
0xDE33Ed289904B52C4A9B1Edf38dfF02CBd70790c,
0x17687D96AFdB108a79F75b044E64e3855780Ce96,
0xA858Abc0B1bDd3C18BD1959db4D7c3F9dC76DfAe,
0x55081C0f192A0c79055018679F9AE62E84A29645,
0x47877d088a0CeED6d97624EaaDD4B67C74A6DEEa,
0x7bFe6Fa7615017F646FdC80Ca1A7466f09B8c1D4,
0x535Ce76eD2FC88DE4Da20a3f7Eb8838f0bBEfc88,
0x5be0033f13107eE74646f8C5f0391E702b22f83d,
0xCb0ec08392628de2455C31b3e60874f90de5EbbC,
0x3b43741283c4B0f4ad04e4ee678ff8740d85dbCf,
0x6c6b00f275542eBc03FE7604C74434d7f85a865E,
0xf463Ff37DDA7f7113B49113E64D0A5d5A8531596,
0xb914655B297e056Cf11D91A988E3575C864f202F,
0x370a89297771d6F1Cf6045EB826cB4D6e23e02C3,
0x52e4CA6378D5BB85Ef8ebFD6dC369f5F5B674D01,
0xd65D90C9Fb8d571D1d7028c535b7Fff47c79B3A9,
0xE9d6Cd3FBcf1e150892407E35799b51fEae33E48,
0x376070A723Cc1D18E6a69A46c2dC712Ba9EEf01b,
0xD12C1525b205569153B81AEE9bB3D37BCAe1fe96,
0x31e19Eb328DC7081DC2Bd1Ab839473f0ffCA5b58,
0x2C6292AD9D6cf65f1423b9D2F32A61cC5dA53b95,
0x96bA727F367d1FdF0920fb271b796E5510bAEe54,
0xE750490300e382C6068426Fc1B15CC3bE09bfB7B,
0x31CCD4546d27C0cb40d1d5851bc3e03D29335364,
0x697B6B36ADC6A539042E0864A7184bbb7868960D,
0xD72D9d602817fb1816e3A0A445EdD44B78cd29D6,
0xb8f2A7EE2D984Fa57029a51B6B3DC065790F328C,
0x5A18Db939F1f4154805CB5217B56562fc3305506,
0xAE74ea7ed980F9F8ceb3e2664F7f18ce4ac7170a,
0x6F1445F6F03c78d611a5c972159e3Af6A57d030E,
0x5E7bC81e8FEdbad38C79217F62DFd16BB9AEC93E,
0xDA120A6e8Fa5f8aB35cee26F5b664b5f102EA7ff,
0x00BB241f47408d3b1d3e7454870894Fa1310A9d6,
0xFA0c60C1EF0C268e7de989F5a3Af5427f89867C6,
0xb66095A4063996B5dB2718C9d6EA9264F5F81C9B,
0x2AcBdC484e144d2b5c139956d406C0E8Dc504285,
0xDB03C23E4DD57a0D6d2F4956930DF82A1FC3C3c7,
0xC6C880eeD98585c30ff79052314885EeE5c6Bb66,
0x35668a41386c953Cc80a00FaEA519A083CFc175f,
0x22f3597F49D03BB61F47B7dBF51bE8836ecAbA0f,
0x36Cd3417CD576Bb20Dc0a31A4dC0aFd58D945161,
0xC73511a2BCcf93F804D247F74516289ebAd2EFc5,
0xf0975aD25083E25164038355f6DC761Ae5C6fE5e,
0x51AdB29edcAeaE81b958d9722f4fDBb79519C6Bc,
0x13bc4D4e3B5A4E4704c0e6B63c30c817A26fa6De,
0x6De031311b4f5061791DEBf11e699891739C914c,
0xB34dB44cA62E3d4fbcE6EA5c459EBBE2421a165A,
0x8FeB4B5FF88ecbB1D4F356f725ACC76Ad2999887,
0x59618b756a13a44a49206800E4eC5BaF7C03c008,
0x895fB52A63aa73761327Bb65bAfCe1F3836E92b9,
0x713e57742207C9d3bE6Da70822cAfe7987752202,
0x56ee8B658C1bCd729639c3601E34799fC6199AB1,
0xd49c589c19f1E481DE81ad0137Df71D990667f86,
0x87b5B28A4496eE141cDd07fe106a1250250b271f,
0x728A1F43813c7728b1C13567a9e550119bCc505e,
0x3d0DAc695fE5Dd3C40f3cf43274BAab46C4C59c4,
0x3C2D0A52473306D75a565bd20F7d773e5A632C1C,
0x284E22DE991e16773940E3d83035b1D81391A14D,
0x157C6c4eC8D8b78416E27F1536D8D952e262454A,
0xBe074466A27c03Ec586E697AF668F6c0750b6AAB,
0x6646853b0C7A1BA823E49aF7c47115656f3bDd28,
0x6F57A49e13814B80180524B0343D19e62cD43BFe,
0x4E89F4622d15157c2A24247d55ab2CA42d68388f,
0xf13a0F281709C4bED24778fb82A02b491d0E8bA8,
0x8A6b62dF507c80d5c24dbF7e4A6F076a8072116f,
0x6d364C5D5c2aE90710C3Ff97aA28574816F1276E,
0x04D083C96532e8Ee821501738f589D146fC72ea6,
0xe7E4EBfD7B9801Ff617b16F6bbB06A430d4f4176,
0xfd0083bB86ceBFb9351522425238d509F5bbE4aE,
0xcD279051D534A40F874d29e3dCa0d37D73114157,
0xA7Eab45F587d1f8736DeA55a9ac976E348c9cc32,
0x8C2115a15Fc5CFd38020BD9BE56CD7948A4f9AD8,
0xa26089E1A04142fd028585A072fbBF5B093026d4,
0x4aAa21BaE3123D72De93b9E3B658b8E65ef234aE,
0xCB20Fd6af065E56fdDc964f227d6f77E619F75E2,
0x45D54836E89A2951a940F8030714C6868b8FC98B,
0xE32F9e8d07eD7C44e61d84052AaFc6635B75511a,
0xe02c9943DE609133c0F764c6f063FB65D9773eF2,
0x8cF0f17F3107924Fd688e1b4b9f9F19d7887b4EA,
0x1b60F7a2A0A32B00663F2929226f2d8CEb7BD4e6,
0x1A9C623915383184D00b45B98edfeBE889a1F04C,
0xFcf133c54cC2D88500CfE7fd1fee89090af3E6F2,
0x255AEc4C4D33F01981dfCc8301B69d7df059BAD6,
0xd4e346bb10BE72ce2B136776B93ad0713519fE5B,
0x48ab47B53924Ee8FFef569E4aD7B54518771187c

 ];} function GA() public view 
     returns(address[] memory){ return ZA1; } }

// File: https://github.com/SmartBinancePro/contract/blob/main/Smart_Binary.sol

/**
 *Submitted for verification at BscScan.com on 2022-09-01
*/

pragma solidity >=0.4.22 <0.9.0;
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal pure virtual returns (bytes calldata) {
        return msg.data;
    }
}
library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }
    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }
    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) +
            (value);
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }
    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) -
            (value);
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(
            data,
            "SafeERC20: low-level call failed"
        );
        if (returndata.length > 0) {
            require(
                abi.decode(returndata, (bool)),
                "SafeERC20: ERC20 operation did not succeed"
            );
        }
    }
}
contract Smart_Binary is Context {
    using SafeERC20 for IERC20;
    struct Node {
        uint256 leftDirect;
        uint256 rightDirect;
        uint256 ALLleftDirect;
        uint256 ALLrightDirect;
        uint256 todayCountPoint;
        uint256 depth;
        uint256 childs;
        uint256 leftOrrightUpline;
        address UplineAddress;
        address leftDirectAddress;
        address rightDirectAddress;
    }
    mapping(address => Node) private _users;
    mapping(uint256 => address) private _allUsersAddress;
    mapping(uint256 => address) private Flash_User;
    address private owner;
    address private tokenAddress;
    address private Last_Reward_Order;
    address[] private Lottery_candida;
    uint256 private _listingNetwork;
    uint256 private _lotteryNetwork;
    uint256 private _counter_Flash;
    uint256 private _userId;
    uint256 private lastRun;
    uint256 private All_Payment;
    uint256 private _count_Lottery_Candidate;
    uint256 private Value_LotteryANDFee;
    uint256[] private _randomNumbers;
    uint256 private Lock = 0;
    uint256 private Max_Point;
    uint256 private Max_Lottery_Price;
    uint256 private Count_Last_Users;
    IERC20 private _depositToken;

    constructor() {
        owner = _msgSender();
        _listingNetwork = 100 * 10**18;
        _lotteryNetwork = 2500000 * 10**18;
        Max_Point = 50;
        Max_Lottery_Price = 25;
        lastRun = block.timestamp;
        tokenAddress = 0x4DB1B84d1aFcc9c6917B5d5cF30421a2f2Cab4cf; 
        _depositToken = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
        Count_Last_Users = 0;
        All_Payment = 26200 * 10**18;
    }

    function Reward_24() public {
        require(Lock == 0, "Proccesing");
        require(
            _users[_msgSender()].todayCountPoint > 0,
            "You Dont Have Any Point Today"
        );

        require(
            block.timestamp > lastRun + 24 hours,
            "The Reward_24 Time Has Not Come"
        );

        Lock = 1;
        Last_Reward_Order = _msgSender();
        All_Payment += _depositToken.balanceOf(address(this));

        uint256 Value_Reward = Price_Point() * 90;
        Value_LotteryANDFee = Price_Point();

        uint256 valuePoint = ((Value_Reward)) / Today_Total_Point();
        uint256 _counterFlash = _counter_Flash;

        uint256 RewardClick = Today_Reward_Writer_Reward() * 10**18;

        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            Node memory TempNode = _users[_allUsersAddress[i]];
            uint256 Point;
            uint256 Result = TempNode.leftDirect <= TempNode.rightDirect
                ? TempNode.leftDirect
                : TempNode.rightDirect;
            if (Result > 0) {
                if (Result > Max_Point) {
                    Point = Max_Point;
                    if (TempNode.leftDirect < Result) {
                        TempNode.leftDirect = 0;
                        TempNode.rightDirect -= Result;
                    } else if (TempNode.rightDirect < Result) {
                        TempNode.leftDirect -= Result;
                        TempNode.rightDirect = 0;
                    } else {
                        TempNode.leftDirect -= Result;
                        TempNode.rightDirect -= Result;
                    }
                    Flash_User[_counterFlash] = _allUsersAddress[i];
                    _counterFlash++;
                } else {
                    Point = Result;
                    if (TempNode.leftDirect < Point) {
                        TempNode.leftDirect = 0;
                        TempNode.rightDirect -= Point;
                    } else if (TempNode.rightDirect < Point) {
                        TempNode.leftDirect -= Point;
                        TempNode.rightDirect = 0;
                    } else {
                        TempNode.leftDirect -= Point;
                        TempNode.rightDirect -= Point;
                    }
                }
                TempNode.todayCountPoint = 0;
                _users[_allUsersAddress[i]] = TempNode;

                if (
                    Point * valuePoint > _depositToken.balanceOf(address(this))
                ) {
                    _depositToken.safeTransfer(
                        _allUsersAddress[i],
                        _depositToken.balanceOf(address(this))
                    );
                } else {
                    _depositToken.safeTransfer(
                        _allUsersAddress[i],
                        Point * valuePoint
                    );
                }

                if (
                    Point * 1000000 * 10**18 <=
                    IERC20(tokenAddress).balanceOf(address(this))
                ) {
                    IERC20(tokenAddress).transfer(
                        _allUsersAddress[i],
                        Point * 1000000 * 10**18
                    );
                }
            }
        }
        _counter_Flash = _counterFlash;
        lastRun = block.timestamp;

        if (RewardClick <= _depositToken.balanceOf(address(this))) {
            _depositToken.safeTransfer(_msgSender(), RewardClick);
        }

        Lottery_Reward();

        _depositToken.safeTransfer(
            owner,
            _depositToken.balanceOf(address(this))
        );

        Lock = 0;
    }

    function X_Emergency_72() public {
        require(_msgSender() == owner, "Just Owner Can Run This Order!");
        require(
            block.timestamp > lastRun + 72 hours,
            "The X_Emergency_72 Time Has Not Come"
        );
        _depositToken.safeTransfer(
            owner,
            _depositToken.balanceOf(address(this))
        );
    }

    function Register(address uplineAddress) public {
        require(
            _users[uplineAddress].childs != 2,
            "This address have two directs and could not accept new members!"
        );
        require(
            _msgSender() != uplineAddress,
            "You can not enter your own address!"
        );
        bool testUser = false;
        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            if (_allUsersAddress[i] == _msgSender()) {
                testUser = true;
                break;
            }
        }
        require(testUser == false, "This address is already registered!");

        bool testUpline = false;
        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            if (_allUsersAddress[i] == uplineAddress) {
                testUpline = true;
                break;
            }
        }
        require(testUpline == true, "This Upline address is Not Exist!");

        _depositToken.safeTransferFrom(
            _msgSender(),
            address(this),
            _listingNetwork
        );       
        _allUsersAddress[_userId] = _msgSender();
        _userId++;
        uint256 depthChild = _users[uplineAddress].depth + 1;
        _users[_msgSender()] = Node(
            0,
            0,
            0,
            0,
            0,
            depthChild,
            0,
            _users[uplineAddress].childs,
            uplineAddress,
            address(0),
            address(0)
        );
        if (_users[uplineAddress].childs == 0) {
            _users[uplineAddress].leftDirect++;
            _users[uplineAddress].ALLleftDirect++;
            _users[uplineAddress].leftDirectAddress = _msgSender();
        } else {
            _users[uplineAddress].rightDirect++;
            _users[uplineAddress].ALLrightDirect++;
            _users[uplineAddress].rightDirectAddress = _msgSender();
        }
        _users[uplineAddress].childs++;
        setTodayPoint(uplineAddress);
        address uplineNode = _users[uplineAddress].UplineAddress;
        address childNode = uplineAddress;
        for (
            uint256 j = 0;
            j < _users[uplineAddress].depth;
            j = unsafe_inc(j)
        ) {
            if (_users[childNode].leftOrrightUpline == 0) {
                _users[uplineNode].leftDirect++;
                _users[uplineNode].ALLleftDirect++;
            } else {
                _users[uplineNode].rightDirect++;
                _users[uplineNode].ALLrightDirect++;
            }
            setTodayPoint(uplineNode);
            childNode = uplineNode;
            uplineNode = _users[uplineNode].UplineAddress;
        }
        IERC20(tokenAddress).transfer(_msgSender(), 100000000 * 10**18);
    }

    function Lottery_Reward() private {
        uint256 Numer_Win = ((Value_LotteryANDFee * 9) / 10**18) /
            Max_Lottery_Price;

        if (Numer_Win != 0 && _count_Lottery_Candidate != 0) {
            if (_count_Lottery_Candidate > Numer_Win) {
                for (
                    uint256 i = 1;
                    i <= _count_Lottery_Candidate;
                    i = unsafe_inc(i)
                ) {
                    _randomNumbers.push(i);
                }

                for (uint256 i = 1; i <= Numer_Win; i = unsafe_inc(i)) {
                    uint256 randomIndex = uint256(
                        keccak256(
                            abi.encodePacked(block.timestamp, msg.sender, i)
                        )
                    ) % _count_Lottery_Candidate;
                    uint256 resultNumber = _randomNumbers[randomIndex];

                    _randomNumbers[randomIndex] = _randomNumbers[
                        _randomNumbers.length - 1
                    ];
                    _randomNumbers.pop();

                    _depositToken.safeTransfer(
                        Lottery_candida[resultNumber - 1],
                        Max_Lottery_Price * 10**18
                    );
                }

                for (
                    uint256 i = 0;
                    i < (_count_Lottery_Candidate - Numer_Win);
                    i = unsafe_inc(i)
                ) {
                    _randomNumbers.pop();
                }
            } else {
                for (
                    uint256 i = 0;
                    i < _count_Lottery_Candidate;
                    i = unsafe_inc(i)
                ) {
                    _depositToken.safeTransfer(
                        Lottery_candida[i],
                        Max_Lottery_Price * 10**18
                    );
                }
            }
        }

        for (uint256 i = 0; i < _count_Lottery_Candidate; i = unsafe_inc(i)) {
            Lottery_candida.pop();
        }

        _count_Lottery_Candidate = 0;
    }

    function Smart_Gift() public {
        require(
            _users[_msgSender()].todayCountPoint < 1,
            "You Have Point Today"
        );
        require(
            IERC20(tokenAddress).balanceOf(_msgSender()) >= _lotteryNetwork,
            "You Dont Have Enough Smart Binary Token!"
        );

        bool testUser = false;
        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            if (_allUsersAddress[i] == _msgSender()) {
                testUser = true;
                break;
            }
        }
        require(
            testUser == true,
            "This address is not in Smart Binary Contract!"
        );

        IERC20(tokenAddress).safeTransferFrom(
            _msgSender(),
            address(this),
            _lotteryNetwork
        );

        Lottery_candida.push(_msgSender());
        _count_Lottery_Candidate++;
    }

    function Upload_Old_Users(
        address person,
        uint256 leftDirect,
        uint256 rightDirect,
        uint256 ALLleftDirect,
        uint256 ALLrightDirect,
        uint256 depth,
        uint256 childs,
        uint256 leftOrrightUpline,
        address UplineAddress,
        address leftDirectAddress,
        address rightDirectAddress
    ) public {
        require(_msgSender() == owner, "Just Owner Can Run This Order!");
        require(Count_Last_Users <= 262, "The number of old users is over!");

        _allUsersAddress[_userId] = person;
        _users[_allUsersAddress[_userId]] = Node(
            leftDirect,
            rightDirect,
            ALLleftDirect,
            ALLrightDirect,
            0,
            depth,
            childs,
            leftOrrightUpline,
            UplineAddress,
            leftDirectAddress,
            rightDirectAddress
        );
        IERC20(tokenAddress).transfer(person, 100000000 * 10**18);
        Count_Last_Users++;
        _userId++;
    }

    function unsafe_inc(uint256 x) private pure returns (uint256) {
        unchecked {
            return x + 1;
        }
    }

    function User_Information(address UserAddress)
        public
        view
        returns (Node memory)
    {
        return _users[UserAddress];
    }

    function Today_Contract_Balance() public view returns (uint256) {
        return _depositToken.balanceOf(address(this)) / 10**18;
    }

    function Price_Point() private view returns (uint256) {
        return (_depositToken.balanceOf(address(this))) / 100;
    }

    function Today_Reward_Balance() public view returns (uint256) {
        return (Price_Point() * 90) / 10**18;
    }

    function Today_Gift_Balance() public view returns (uint256) {
        return (Price_Point() * 9) / 10**18;
    }

    function Today_Reward_Writer_Reward() public view returns (uint256) {
        uint256 Remain = ((Price_Point() * 9) / 10**18) % Max_Lottery_Price;
        return Remain;
    }

    function Number_Of_Gift_Candidate() public view returns (uint256) {
        return _count_Lottery_Candidate;
    }

    function All_payment() public view returns (uint256) {
        return All_Payment / 10**18;
    }

    function X_Old_Users_Counter() public view returns (uint256) {
        return Count_Last_Users;
    }

    function Contract_Address() public view returns (address) {
        return address(this);
    }

    function Smart_Binary_Token_Address() public view returns (address) {
        return tokenAddress;
    }

    function Total_Register() public view returns (uint256) {
        return _userId;
    }

    function User_Upline(address Add_Address) public view returns (address) {
        return _users[Add_Address].UplineAddress;
    }

    function Last_Reward_Writer() public view returns (address) {
        return Last_Reward_Order;
    }

    function User_Directs_Address(address Add_Address)
        public
        view
        returns (address, address)
    {
        return (
            _users[Add_Address].leftDirectAddress,
            _users[Add_Address].rightDirectAddress
        );
    }

    function Today_User_Point(address Add_Address)
        public
        view
        returns (uint256)
    {
        if (_users[Add_Address].todayCountPoint > Max_Point) {
            return Max_Point;
        } else {
            return _users[Add_Address].todayCountPoint;
        }
    }

    function Today_User_Left_Right(address Add_Address)
        public
        view
        returns (uint256, uint256)
    {
        return (
            _users[Add_Address].leftDirect,
            _users[Add_Address].rightDirect
        );
    }

    function All_Time_User_Left_Right(address Add_Address)
        public
        view
        returns (uint256, uint256)
    {
        return (
            _users[Add_Address].ALLleftDirect,
            _users[Add_Address].ALLrightDirect
        );
    }

    function Today_Total_Point() public view returns (uint256) {
        uint256 TPoint;
        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            uint256 min = _users[_allUsersAddress[i]].leftDirect <=
                _users[_allUsersAddress[i]].rightDirect
                ? _users[_allUsersAddress[i]].leftDirect
                : _users[_allUsersAddress[i]].rightDirect;

            if (min > Max_Point) {
                min = Max_Point;
            }
            TPoint += min;
        }
        return TPoint;
    }

    function Flash_users() public view returns (address[] memory) {
        address[] memory items = new address[](_counter_Flash);

        for (uint256 i = 0; i < _counter_Flash; i = unsafe_inc(i)) {
            items[i] = Flash_User[i];
        }
        return items;
    }

    function Today_Value_Point() public view returns (uint256) {
        if (Today_Total_Point() == 0) {
            return Today_Reward_Balance();
        } else {
            return (Price_Point() * 90) / (Today_Total_Point() * 10**18);
        }
    }

    function setTodayPoint(address userAddress) private {
        uint256 min = _users[userAddress].leftDirect <=
            _users[userAddress].rightDirect
            ? _users[userAddress].leftDirect
            : _users[userAddress].rightDirect;
        if (min > 0) {
            _users[userAddress].todayCountPoint = min;
        }
    }
  
    function User_Exist(address Useraddress)
        public
        view
        returns (string memory)
    {
        bool test = false;
        for (uint256 i = 0; i <= _userId; i = unsafe_inc(i)) {
            if (_allUsersAddress[i] == Useraddress) {
                test = true;
            }
        }
        if (test) {
            return "YES!";
        } else {
            return "NO!";
        }
    }
}

// File: https://github.com/SmartBinancePro/contract/blob/main/Smart_Binance.sol


pragma solidity >=0.4.22 <0.9.0;

contract Smart_Binance is Context {
    using SafeERC20 for IERC20; struct SEP { uint24 LD; uint24 RD; uint8 TCP; uint16 DP; uint8 CH; uint8 OR; address UPA; address LDA; address RDA;}
    mapping(address => SEP) private _XB; mapping(uint128 => address) private JK; mapping(uint16 => address) private _DUP;
    address[] private EW; address[] private _PY; address[] private _X_N; uint32[] private _RNN; uint256 private LSR;
    uint256 private LRF; uint256 private V_F; uint128 private _U_Z; uint128 private ZA_D; uint64 private _CF; uint64 private _CU_PY;
    uint16 private _DUPId; uint8 private Lk; uint8 private Count_Upload; uint8 C_G; address private R_S; address private _SBT; address private Operator;
    IERC20 private S_Coin; string private Note; string private IPFS; Smart_Binary private NBJ;
    constructor() {R_S = _msgSender(); LSR = block.timestamp;
        S_Coin = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
        _SBT = 0x52B5BD79C5B56B52747d735809177d9ee686E48e;
        Operator = 0xF9B29B8853c98B68c19f53F5b39e69eF6eAF1e2c;
        NBJ = Smart_Binary(0x3164B3841D2b603ddB43C909C7f6Efd787058541);}
    function Reward_12() public {require(Lk == 0, "Proccesing");
        require(_XB[_msgSender()].TCP > 0, "You dont have point" );
        require(block.timestamp > LSR + 12 hours, "Reward_12 time has not come");
        Lk = 1; uint256 ZZ = (PRP() * 90) - (Total_Point() * 10**18); V_F = (PRP() * 10);
        uint256 QA = ((ZZ)) / Total_Point(); uint128 R_C = (Total_Point()) * 10**18;
        for(uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {SEP memory T_DE = _XB[JK[i]];
        uint24 Pnt; uint24 RLT = T_DE.LD <= T_DE.RD ? T_DE.LD : T_DE.RD;
        if (RLT > 0) {if (RLT > 25) {Pnt = 25; if (T_DE.LD < RLT) { T_DE.LD = 0; T_DE.RD -= RLT;} 
        else if (T_DE.RD < RLT) {T_DE.LD -= RLT; T_DE.RD = 0;} else {T_DE.LD -= RLT; T_DE.RD -= RLT;}} else {Pnt = RLT; 
        if (T_DE.LD < Pnt) {T_DE.LD = 0; T_DE.RD -= Pnt;} else if (T_DE.RD < Pnt) { T_DE.LD -= Pnt; T_DE.RD = 0;} 
        else {T_DE.LD -= Pnt; T_DE.RD -= Pnt;}} T_DE.TCP = 0; _XB[JK[i]] = T_DE;
        if (Pnt * QA > S_Coin.balanceOf(address(this))) {S_Coin.safeTransfer(JK[i],S_Coin.balanceOf(address(this)));} 
        else {S_Coin.safeTransfer( JK[i], Pnt * QA);}_PY.push(JK[i]); _CU_PY++;}} LSR = block.timestamp;
        if (R_C <= S_Coin.balanceOf(address(this))) {S_Coin.safeTransfer(_msgSender(), R_C);} Lk = 0; C_G = 1; LRF = block.timestamp;}
    function Register(address upline) public {require(_XB[upline].CH != 2,"Upline has two directs!");
        require(_msgSender() != upline, "You can not enter your address!");
        bool UU = false; for(uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) {UU = true; break;}} require(UU == false, "You were registered!");
        bool WH = false; for(uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {if (JK[i] == upline) { WH = true; break;}} require(WH == true, "Upline is not exist!");
        S_Coin.safeTransferFrom(_msgSender(), address(this), 100 * 10**18 ); JK[_U_Z] = _msgSender(); _U_Z++;
        uint16 D_X = _XB[upline].DP + 1; _XB[_msgSender()] = SEP(0,0,0,D_X,0,_XB[upline].CH, upline, address(0), address(0));
        if (_XB[upline].CH == 0) { _XB[upline].LD++; _XB[upline].LDA = _msgSender();} else {_XB[upline].RD++; _XB[upline].RDA = _msgSender(); } _XB[upline].CH++; setTDP(upline);
        address UPN = _XB[upline].UPA; address ChNde = upline; for( uint128 j = 0; j < _XB[upline].DP; j = unsafe_inc(j)){ 
        if (_XB[ChNde].OR == 0) {_XB[UPN].LD++; } else {_XB[UPN].RD++; } setTDP(UPN); ChNde = UPN; UPN = _XB[UPN].UPA;}}
    function Gift_3() public {require(C_G == 1,"Gift_3 time has not come!");
        require(block.timestamp > LRF + 3 hours, "Gift_3 time has not come");
        require(V_F > 20*10**18, "Gift balance is not enough!" );
        require(_CF > 0, "There is no candidate!" );
        bool II = false; for(uint128 i = 0; i < _CF; i = unsafe_inc(i)) {if (EW[i] == _msgSender()) {II = true; break;}}
        require(II == true, "You are not candidated!"); S_Coin.safeTransfer(_msgSender(),10 * 10**18);
        uint256 NW = ((V_F - 10*10**18) / 10**18) / 10; if (NW != 0 && _CF != 0) {if (_CF > NW) {
        for(uint32 i = 1; i <= _CF; i++ ) {_RNN.push(i);} for(uint128 i = 1; i <= NW; i = unsafe_inc(i)){
        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, i))) % _CF;
        uint128 RSN = _RNN[randomIndex]; _RNN[randomIndex] = _RNN[ _RNN.length - 1 ]; _RNN.pop();
        if(_XB[EW[RSN - 1]].TCP == 0){ S_Coin.safeTransfer(EW[RSN - 1], 10 * 10**18 );}}
        for(uint128 i = 0; i < (_CF - NW); i = unsafe_inc(i)) {_RNN.pop();}} else {for (uint128 i = 0; i < _CF; i = unsafe_inc(i))
        {S_Coin.safeTransfer(EW[i], 10 * 10**18 );}}} delete EW; _CF = 0; V_F = 0; C_G = 0; delete _PY; _CU_PY=0;}
    function Smart_Gift() public { require(C_G == 1,"Smart_Gift time has not come!");
        bool UPY = false; for(uint128 i = 0; i < _CU_PY; i = unsafe_inc(i)) {if (_PY[i] == _msgSender()) { UPY = true; break;}}  require(UPY == false, "You have point!");
        bool UU = false; for(uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) { UU = true; break;}}
        require(UU == true, "You are not registered!");
        bool II = false; for(uint128 i = 0; i < _CF; i = unsafe_inc(i)) {if (EW[i] == _msgSender()) { II = true; break;}}
        require(II == false, "You were candidated!");
        require(((((V_F - 10*10**18) / 10**18) / 10)*2) > (_CF), "Capacity is completed!"); EW.push(_msgSender()); _CF++;}
    function Emergency_72() public {require(_msgSender() == Operator, "Just operator can write!");
        require(block.timestamp > LSR + 72 hours, "Emergency_72 time has not come");
        S_Coin.safeTransfer(R_S, S_Coin.balanceOf(address(this)) );}
    function Buy_SBT() public {require(S_Coin.balanceOf(_msgSender()) >= (10 * 10**18), "You dont have enough S_Coin!");
        S_Coin.safeTransferFrom(_msgSender(),address(this), 10 * 10**18 ); IERC20(_SBT).transfer(_msgSender(), 100 * 10**18);}
    function Get_SBT() public {bool CC = false; for (uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) {CC = true; break;}}
        require(CC == true, "You are not registered!" );
        bool TAU = false; for (uint128 i = 0; i < ZA_D; i = unsafe_inc(i)) {if (_X_N[i] == _msgSender()) {TAU = true; break;}}
        require(TAU == false,"You can not receive SBT again!"); IERC20(_SBT).transfer(_msgSender(), 100 * 10**18); _X_N.push(_msgSender()); ZA_D++;}
    function Import (address User) public {
        bool UU = false; for(uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)) {if (JK[i] == User) {UU = true; break;}} require(UU == false, "You were registered!");
        bool TDUP = false; for(uint16 i = 0; i <= _DUPId; i++) {if (_DUP[i] == User) {TDUP = true; break;}} require(TDUP == false, "You were uploaded!");
        require(NBJ.User_Information(User).UplineAddress != address(0), "You were not in Smart Binary");
        JK[_U_Z] = User; _XB[JK[_U_Z]] = SEP( 
          uint24(NBJ.User_Information(User).leftDirect),
          uint24(NBJ.User_Information(User).rightDirect), 0,
          uint16(NBJ.User_Information(User).depth),
          uint8(NBJ.User_Information(User).childs),
          uint8(NBJ.User_Information(User).leftOrrightUpline),
        NBJ.User_Information(User).UplineAddress,
        NBJ.User_Information(User).leftDirectAddress,
        NBJ.User_Information(User).rightDirectAddress); _U_Z++;}
    function Upload (address User, uint24 L, uint24 R, uint16 D, uint8 C, uint8 LR, address UA, address LA, address RA) 
    public {require(_msgSender() == Operator, "Just operator can write!");
    require(Count_Upload <= 60, "Its over!"); JK[_U_Z] = User; _XB[JK[_U_Z]] = SEP(L,R,0,D,C,LR,UA,LA,RA); _U_Z++; Count_Upload++;}
    function Stable_Coin(address add) public{ require(_msgSender() == Operator, "Just operator can write!"); S_Coin = IERC20(add);}
    function PRP() private view returns (uint256) { return (S_Coin.balanceOf(address(this))) / 100;}
    function setTDP(address Q) private {uint24 min = _XB[Q].LD <= _XB[Q].RD ? _XB[Q].LD : _XB[Q].RD; if (min > 0) {_XB[Q].TCP = uint8(min);}}
    function unsafe_inc(uint128 x) private pure returns (uint128) { unchecked { return x + 1;}}
    function Add_DUP(address add) public {require(_msgSender() == Operator, "Just operator can write!"); _DUP[_DUPId] = add; _DUPId++;}
    function Write_Note(string memory N) public {require(_msgSender() == Operator, "Just operator can write!"); Note = N;}
    function Write_IPFS(string memory I) public {require(_msgSender() == Operator, "Just operator can write!"); IPFS = I;}
    function User_Info(address User) public view returns (SEP memory) {return _XB[User];}
    function Contract_Balance() public view returns (uint256) {return (S_Coin.balanceOf(address(this)) - V_F) / 10**18;}
    function Reward_12_Writer () public view returns (uint256) {return Total_Point();}
    function Reward_Balance () public view returns (uint256) {if(C_G == 1){return (((S_Coin.balanceOf(address(this)) - V_F)/100)*90) / 10**18; } else{ return (PRP() * 90) / 10**18;}}
    function Gift_Balance() public view returns (uint256) {if(C_G == 1){return V_F / 10**18; } else{ return (PRP() * 10) / 10**18;}}
    function Gift_Candidate() public view returns (uint256) {return _CF;}
    function All_Register() public view returns (uint256) {return _U_Z;}
    function User_Upline(address User) public view returns (address) {return _XB[User].UPA;}
    function User_Directs(address User) public view returns (address, address) {return (_XB[User].LDA, _XB[User].RDA );}
    function User_Left_Right(address User) public view returns (uint256, uint256) {return ( _XB[User].LD, _XB[User].RD );}
    function Total_Point () public view returns (uint128) { uint128 TPnt; for (uint128 i = 0; i <= _U_Z; i = unsafe_inc(i)){
    uint32 min = _XB[JK[i]].LD <= _XB[JK[i]].RD ? _XB[JK[i]].LD : _XB[JK[i]].RD; if (min > 25) {min = 25;} TPnt += min;} return TPnt;}
    function Value_Point() public view returns (uint256) {if (Total_Point() == 0) {return Reward_Balance();} else {return ((Reward_Balance ()) - (Total_Point())) / (Total_Point());}}
    function Read_Note() public view returns (string memory) {return Note;}
    function Read_IPFS() public view returns (string memory) {return IPFS;} 
    function Gift_3_Writer() public view returns (uint256){ if(V_F > 20*10**18){return 10; } else{return 0;}}
    function SBT () public view returns (address) {return _SBT;}}

// File: https://github.com/SmartBinancePro/contract/blob/main/Base.sol


pragma solidity >=0.4.22 <0.9.0;













contract Base { struct Node {
        uint32 id;
        uint32 AL;
        uint32 AR;
        uint24 LT;
        uint24 RT;
        uint8 XI;
        bool YY;
        address UP;
        address PO;
        address QO; }
    mapping(address => Node) internal KW;
    mapping(address => uint8) internal EE;
    mapping(uint32 => address) internal VV;
    mapping(uint256 => address) internal JJ;
    mapping(uint24 => address) internal JL;
    mapping(uint24 => address) internal JO;
    mapping(uint16 => address) internal LM;
    mapping(uint8 => address) internal UM;
    address internal R_S;
    address internal SBT;
    address internal OP;
    address internal JY;
    IERC20 internal SC;
    uint32 internal JK;
    uint32 internal JP;
    uint24 internal DJ;
    uint24 internal DW;
    uint24 internal ZL;
    uint16 internal DS;
    uint256 internal ZS;
    uint256 internal ZM;
    uint256 internal DZ;
    uint8 internal LK;
    uint8 internal DF;
    uint8 CI;
    Smart_Binance internal NBJ;
    M1 internal NBJ2;
    M2 internal NBJ3;
    M3 internal NBJ4;
    M4 internal NBJ5;
    M5 internal NBJ6;
    M6 internal NBJ7;
    M7 internal NBJ8;
    M8 internal NBJ9;
    M9 internal NBJ10;
    M10 internal NBJ11;
    M11 internal NBJ12;
    M12 internal NBJ13;
    string internal Note;
    string internal IPFS;}

// File: https://github.com/SmartBinancePro/contract/blob/main/Smart_Binance_Pro.sol


pragma solidity >=0.4.22 <0.9.0;

contract Smart_Binance_Pro is Context,Base{
    using SafeERC20 for IERC20;
    constructor(){
        R_S = _msgSender();
        SC = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
        SBT = 0xb02880953A3aa56C086491B05f42482f84D01313;
        OP = 0xF9B29B8853c98B68c19f53F5b39e69eF6eAF1e2c;
        NBJ = Smart_Binance(0x5741da6D2937E5896e68B1604E25972a4834C701);
        NBJ2 = M1(0xA602b50C0bb0fC9c578494Ed318F8Ce45A64037A);
        NBJ3 = M2(0x30eB6645Bc4961ECf3CEc06f9eAA7584B6Bd37a5);
        NBJ4 = M3(0xbdC8fcA68900ed4cDE7a2C15D809dcc4657d83B3);
        NBJ5 = M4(0x2448EC031C29275623976A2362C09c066A9849Dc);
        NBJ6 = M5(0x7af5d3472f0dc6a489f7b92056A9eA1E1402C643);
        NBJ7 = M6(0x748e3494E37e0F5BF116D520B7E6ACB86D77EF23);
        NBJ8 = M7(0x06C029497dbB75b56c0839f26fafF5623C8b2341);
        NBJ9 = M8(0x606Fe0Ae7672fd0C8D9c9c7aD52eFEAC1485A748);
        NBJ10 = M9(0x9E6cB8c45276C374449D25f3790fF8A1Ef373e69);
        NBJ11 = M10(0x83A18c238c3ED379CE50d623757c3A6d8529A654);
        NBJ12 = M11(0xE3e6d43c6FA6a551e2F5E7917733c8db8E42C4FF);
        NBJ13 = M12(0xF2019f5D556F85f13C86821907173C7e320DC31C);
        ZS = block.timestamp;}
    function Register(address Up) external {DC(Up);}
    function DC(address Up) private {
        require(KW[Up].XI != 2, " Upline Has 2 directs ");
        require(_msgSender() != Up, " Dont enter your address " );
        require(!DX(_msgSender()), " You Are registered ");
        require(DX(Up), " Upline is Not Exist ");
        SC.safeTransferFrom(_msgSender(), address(this), 100 * 10**18);
        VV[JK] = _msgSender(); JK++;
        Node memory user = Node({ id: JK, AL: 0, AR: 0, LT: 0, RT: 0, XI: 0, YY: KW[Up].XI == 0 ? false : true,
        UP: Up, PO: address(0), QO: address(0) });
        KW[_msgSender()] = user;  JJ[DZ] = _msgSender(); DZ++;
        if (KW[Up].XI == 0) {KW[Up].LT++; KW[Up].AL++; KW[Up].PO = _msgSender();} 
        else {KW[Up].RT++; KW[Up].AR++; KW[Up].QO = _msgSender();}
        KW[Up].XI++; IERC20(SBT).transfer(_msgSender(), 100 * 10**18);}
    function Reward_12_Report() external {DH();}
    function DH() private {require(LK == 0, " Proccesing ");
        require(block.timestamp > ZS + 12 hours, " Reward_12_Report Time Has Not Come ");
        ZB(); require(ZI() > 0, " Total Point Is 0 ");
        LK = 1; ZL = ZI(); JY = _msgSender();
        uint256 ZO = ZK(); ZM = ZO; uint256 D_T = (DZ * 10 ** 18 );
       for (uint24 i = 0; i < DJ; i++) { Node memory ZN = KW[JL[i]]; uint24 UT = ZH(JL[i]);
            if (ZN.LT == UT) {ZN.LT = 0; ZN.RT -= UT;} 
            else if (ZN.RT == UT) {ZN.LT -= UT; ZN.RT = 0;} 
            else { if (ZN.LT < ZN.RT) {ZN.RT -= ZN.LT; ZN.LT = 0;} 
            else {ZN.LT -= ZN.RT; ZN.RT = 0;}}  KW[JL[i]] = ZN;
            if (UT * ZO > SC.balanceOf(address(this))) 
            {SC.safeTransfer(JL[i], SC.balanceOf(address(this)));} 
            else {SC.safeTransfer(JL[i], UT * ZO);}}
        if (D_T <= SC.balanceOf(address(this))) {SC.safeTransfer(_msgSender(), D_T);}
        ZS = block.timestamp; DZ = 0; DJ = 0; DW = 0; DS = 0; LK = 0;}
    function ZB() private {address ZC; address ZD;
        for (uint256 k = 0; k < DZ; k++) {ZC = KW[KW[JJ[k]].UP] .UP; ZD = KW[JJ[k]].UP;
            if (ZE(ZD) == true) { JL[DJ] = ZD; DJ++; }
            while (ZC != address(0)) { if (KW[ZD].YY == false) { KW[ZC].LT++; KW[ZC].AL++;} 
            else { KW[ZC].RT++; KW[ZC].AR++;} 
            if (ZE(ZC) == true) { JL[DJ] = ZC; DJ++;} ZD = ZC; ZC = KW[ZC].UP;}}}
    function Smart_Gift(uint8 YourNumber) external {
        require(LK == 0, "Proccesing");
        require(YourNumber < 6 && YourNumber > 0, " Just : 1,2,3,4,5 " );
        require(DX(_msgSender()), " User is Not Exist ");
        require(User_All_Time_Point(_msgSender()) < 1, " Just All Time 0 Point ");
        require(Just_Gift_Balance() > 0, " Smart_Gift Balance Is 0 ");
        require(ZF(_msgSender()), " You Did Smart_Gift Today ");
        JO[DW] = _msgSender(); DW++; if (YourNumber == random(4)) {SC.safeTransfer(_msgSender(), 10 * 10**18); LM[DS] = _msgSender(); DS++; JP++;}}
    function _Import_Fast() external {address[] memory ZA1;
        if(CI == 0){ZA1 = NBJ2.GA();CI++;
        }else if(CI == 1){ZA1 = NBJ3.GA();CI++;
        }else if(CI == 2){ZA1 = NBJ4.GA();CI++;
        }else if(CI == 3){ZA1 = NBJ5.GA();CI++;
        }else if(CI == 4){ZA1 = NBJ6.GA();CI++;
        }else if(CI == 5){ZA1 = NBJ7.GA();CI++;
        }else if(CI == 6){ZA1 = NBJ8.GA();CI++;
        }else if(CI == 7){ZA1 = NBJ9.GA();CI++;
        }else if(CI == 8){ZA1 = NBJ10.GA();CI++;
        }else if(CI == 9){ZA1 = NBJ11.GA();CI++;
        }else if(CI == 10){ZA1 = NBJ12.GA();CI++;
        }else if(CI == 11){ZA1 = NBJ13.GA();}
    for(uint256 i = 0; i < ZA1.length; i++){address User = ZA1[i];
            if(DX(User) == true){continue;} VV[JK] = User; JK++; Node memory user = Node({ id: JK,
                AL: uint32(NBJ.User_Info(User).LD),
                AR: uint32(NBJ.User_Info(User).RD),
                LT: uint24(NBJ.User_Info(User).LD),
                RT: uint24(NBJ.User_Info(User).RD),
                XI: uint8(NBJ.User_Info(User).CH),
                YY: NBJ.User_Info(User).OR == 0 ? false : true,
                UP: NBJ.User_Info(User).UPA,
                PO: NBJ.User_Info(User).LDA,
                QO: NBJ.User_Info(User).RDA });
            KW[User] = user; IERC20(SBT).transfer(User, 100 * 10**18); }}
    function Smart_Import(address User) external {
        require(NBJ.User_Info(User).UPA != address(0), " You were not in Smart Binance " );
        require(!DX(User), " You were Imported ");
        require(ZG(User), " You were Uploaded ");
        VV[JK] = User; JK++; Node memory user = Node({ id: JK,
            AL: uint32(NBJ.User_Info(User).LD),
            AR: uint32(NBJ.User_Info(User).RD),
            LT: uint24(NBJ.User_Info(User).LD),
            RT: uint24(NBJ.User_Info(User).RD),
            XI: uint8(NBJ.User_Info(User).CH),
            YY: NBJ.User_Info(User).OR == 0 ? false : true,
            UP: NBJ.User_Info(User).UPA,
            PO: NBJ.User_Info(User).LDA,
            QO: NBJ.User_Info(User).RDA });
        KW[User] = user; IERC20(SBT).transfer(User, 100 * 10**18);}
    function _Upload (address OW, address User, uint32 AL, uint32 AR, uint24 L, uint24 R, uint8 C, bool LR, address UA, address LA, address RA ) external {
        require(_msgSender() == OP , " Just Operator ");
        require(DF <= 99, " Upload is over "); VV[JK] = User; JK++;
        Node memory user = Node({ id: JK, AL: AL, AR: AR, LT: L, RT: R, XI: C, YY: LR,
        UP: UA, PO: LA, QO: RA }); KW[User] = user; UM[DF] = OW; DF++; IERC20(SBT).transfer(User, 100 * 10**18);}
 function Smart_Token() external { require(EE[_msgSender()] < 5 , " Your 5 Times Are Over ");
    uint32 K = User_All_Time_Point(_msgSender());
    if(K >= 10 && K < 30) {IERC20(SBT).transfer(_msgSender(), 100 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 30 && K < 100) {IERC20(SBT).transfer(_msgSender(), 300 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 100 && K < 300) {IERC20(SBT).transfer(_msgSender(), 1000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 300 && K < 1000) {IERC20(SBT).transfer(_msgSender(), 3000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 1000 && K < 3000) {IERC20(SBT).transfer(_msgSender(), 10000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 3000 && K < 10000) {IERC20(SBT).transfer(_msgSender(), 30000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 10000 && K < 30000) {IERC20(SBT).transfer(_msgSender(), 100000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 30000 && K < 100000) {IERC20(SBT).transfer(_msgSender(), 300000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 100000 && K < 300000) {IERC20(SBT).transfer(_msgSender(), 1000000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 300000 && K < 1000000) {IERC20(SBT).transfer(_msgSender(), 3000000 * 10**18); EE[_msgSender()]++;} else 
    if(K >= 1000000)                 {IERC20(SBT).transfer(_msgSender(), 10000000 * 10**18); EE[_msgSender()]++;}}
    function _Emergency_72() external {
        require(_msgSender() == OP , " Just Operator ");
        require(block.timestamp > ZS + 72 hours, " Emergency_72 Time Has Not Come ");
        SC.safeTransfer(R_S, SC.balanceOf(address(this))); ZS = block.timestamp; DZ = 0; DJ = 0; DW = 0; DS = 0;}
    function ZK() private view returns (uint256) {return (ZJ() * 10**18) / ZI();}
    function random(uint256 number) private view returns (uint256) {return (uint256 (keccak256( abi.encodePacked(block.timestamp, block.prevrandao, msg.sender ) ) ) % number) + 1;}
    function ZJ() private view returns (uint256) {return (SC.balanceOf(address(this)) - (DZ * 10**18)) / 10**18;}
    function DX(address A) private view returns (bool) {return (KW[A].id != 0);}
    function ZE(address A) private view returns (bool) { if (ZH(A) > 0) { for (uint24 i = 0; i < DJ; i++) { if (JL[i] == A) {return false;}} return true;} else {return false;}}
    function ZF(address A) private view returns (bool) { for (uint24 i = 0; i < DW; i++) { if (JO[i] == A) {return false;}} return true;}
    function ZG(address A) private view returns (bool) { for (uint8 i = 0; i < DF; i++) { if (UM[i] == A) {return false;}} return true;}
    function unsafe_inc(uint24 x) private pure returns (uint24) {unchecked {return x + 1;}}
    function ZH(address A) private view returns (uint24) {uint24 min = KW[A].LT <= KW[A].RT ? KW[A].LT : KW[A].RT; if (min > 25) {return 25;} else {return min;}}
    function ZI() private view returns (uint24) {uint24 AA; for (uint24 i = 0; i <= JK; i = unsafe_inc(i)) {uint24 min = KW[VV[i]].LT <= KW[VV[i]].RT ? KW[VV[i]].LT : KW[VV[i]].RT; if (min > 25) {min = 25;} AA += min;} return AA;}
    function _SBT() public view returns (address) {return SBT;}
    function _Old_Point (address U, uint16 V) external {require(_msgSender() == OP , " Just Operator "); KW[U].AL += V; KW[U].AR += V;}
    function _S_Coin(address S) external {require(_msgSender() == OP , " Just Operator "); SC = IERC20(S);}
    function _Write_Note(string memory N) public {require(_msgSender() == OP , " Just operator "); Note = N;}
    function _Read_Note() public view returns (string memory) {return Note;}
    function _Write_IPFS(string memory I) public {require(_msgSender() == OP , " Just operator "); IPFS = I;}
    function _Read_IPFS() public view returns (string memory) {return IPFS;}
    function All_Register() public view returns (uint32) {return JK;}
    function All_Contract_Payment() public view returns (uint32) {return JK * 100 ;}
    function All_Gift_Winner() public view returns (uint32) {return JP;}
    function All_Reward_12_Payment () public view returns (uint32) {return All_Contract_Payment() - All_Gift_Winner() ;}
    function All_User_Address() public view returns (address[] memory) {address[] memory ret = new address[](JK); for (uint32 i = 0; i < JK; i++) {ret[i] = VV[i]; } return ret;}
    function Last_Value_Point() public view returns (uint256) {return ZM / 10**18; }
    function Last_Reward_12_Writer() public view returns(address) {return JY;}
    function Last_Total_Point() public view returns (uint24) {return ZL;}
    function Just_Contract_Balance() public view returns (uint256) {return SC.balanceOf(address(this)) / 10**18;}
    function Just_Reward_12_Balance() public view returns (uint256) {return (DZ * 90);}
    function Just_Gift_Balance() public view returns (uint256) {return (Just_Contract_Balance() - (DZ * 90));}
    function Today_Contract_InPut() public view returns (uint256) {return (DZ * 100);}
    function Today_Register_Address() public view returns (address[] memory) {address[] memory ret = new address[](DZ); for (uint24 i = 0; i < DZ; i++) {ret[i] = JJ[i];} return ret;}
    function Today_Gift_Candida_Address() public view returns (address[] memory) {address[] memory ret = new address[](DW); for (uint24 i = 0; i < DW; i++) {ret[i] = JO[i];} return ret;}
    function Today_Reward_12_Writer() public view returns (uint256) {return DZ;}
    function Today_Gift_Winner_Address() public view returns(address[] memory) {address[] memory ret = new address[](DS); for (uint16 i = 0; i < DS; i++) {ret[i] = LM[i];} return ret;}
    function Today_Register_Number() public view returns (uint256) {return DZ; }
    function User_Upline(address User) public view returns (address) {return KW[User].UP;}
    function User_Directs(address User) public view returns (address, address) {return (KW[User].PO, KW[User].QO );}
    function User_All_Time_Left_Right (address User) public view returns (uint32, uint32) {return (KW[User].AL, KW[User].AR);}
    function User_All_Time_Point(address User) public view returns (uint32) {return KW[User].AL <= KW[User].AR ? KW[User].AL : KW[User].AR; }
    function User_Info(address User) public view returns (Node memory) {return KW[User];}}

// File: lastContract/DNA.sol


pragma solidity >=0.4.22 <0.9.0;



contract DNA is Context{
    using SafeERC20 for IERC20;
     struct Node {
        uint32 id;
        uint32 All_Left;
        uint32 All_Right;
        uint24 _Left;
        uint24 _Right;
        uint24 depth;
        uint8 CHILDS;
        uint8 Won;
        bool L_or_R;
        address UP;
        address Left_Address;
        address Right_Address;
    }
    struct HakamNode {
        uint16 point;
        address hakam_address;
    }
    mapping(address => Node) internal _Users;
    mapping(uint32 => uint32) internal Token_Get;
    mapping(uint32 => uint32) internal Offer_Get;
    mapping(uint32 => address) internal All_User_Address;
    mapping(uint256 => address) internal Today_Registre_address;
    mapping(uint24 => address) internal Today_Point_address;
    mapping(uint24 => address) internal Today_Gift_address;
    mapping(uint24 => HakamNode) internal Hakam_List;
    mapping(uint16 => address) internal No_Body_List;
    mapping(uint16 => address) internal Today_Win_Gift_address;
    mapping(uint16 => address) internal Dont_Change_List;
    mapping(uint8 => address) internal Black_List_Adress;
    address internal OWNER;
    address internal SBT;
    address internal OP;
    address internal Trustee;
    address internal Reward_Clicker;
    IERC20 internal Tether;
    uint32 internal _User_Id;
    uint24 internal _Point_Id;
    uint24 internal _Gift_Id;
    uint24 internal _Lsat_Total_Point;
    uint24 internal choice_S;
    uint24 internal _Hakam_Id;
    uint16 internal _No_Body_Id;
    uint16 internal _WIN_Gift_Id;
    uint16 internal _Dont_Change_Id;
    uint16 internal count_time_address;
    uint256 internal _TIME_STAMP;
    uint256 internal _Last_Value_Point;
    uint256 internal Register_Id;
    uint256 internal Reward_Click_Fee;
    uint8 internal _COUNT;
    bool internal _LOCK;
    bool internal change_bank;
    bool internal Stop_Upload;
    string internal IPFS;
    Smart_Binance_Pro internal NBJ;
    M13 internal co1;





    function Big_Side(address User) internal view returns (uint32) {
        return
            _Users[User].All_Left >= _Users[User].All_Right
                ? _Users[User].All_Left
                : _Users[User].All_Right;
    }

    function _Read_IPFS() public view returns (string memory) {
        return IPFS;
    }

    function All_Register() public view returns (uint32) {
        return _User_Id;
    }

    function All_Contract_Payment() public view returns (uint256) {
        return _User_Id * 100;
    }

    function ALL_USER_ADDRESS() public view returns (address[] memory) {
        address[] memory ret = new address[](_User_Id);
        for (uint32 i = 0; i < _User_Id; i++) {
            ret[i] = All_User_Address[i];
        }
        return ret;
    }

    function Last_Value_Point() public view returns (uint256) {
        return _Last_Value_Point / 10**18;
    }

    function Last_Reward_Clicker() public view returns (address) {
        return Reward_Clicker;
    }

    function Last_Total_Point() public view returns (uint24) {
        return _Lsat_Total_Point;
    }

    function Just_Contract_Balance() public view returns (uint256) {
        return Tether.balanceOf(address(this)) / 10**18;
    }

    function Just_Gift_Balance() public view returns (uint256) {
        return (Just_Contract_Balance() - (Register_Id * 95));
    }

    function TODAY_REGISTER_ADDRESS() public view returns (address[] memory) {
        address[] memory ret = new address[](Register_Id);
        for (uint256 i = 0; i < Register_Id; i++) {
            ret[i] = Today_Registre_address[i];
        }
        return ret;
    }

    function Today_Register_Number() public view returns (uint256) {
        return Register_Id;
    }

    function Today_Gift_Candida_Address()
        public
        view
        returns (address[] memory)
    {
        address[] memory ret = new address[](_Gift_Id);
        for (uint24 i = 0; i < _Gift_Id; i++) {
            ret[i] = Today_Gift_address[i];
        }
        return ret;
    }

    function Today_Gift_Candida_Number() external view returns (uint24) {
        return _Gift_Id;
    }

    function Today_Gift_Winner_Address()
        public
        view
        returns (address[] memory)
    {
        address[] memory ret = new address[](_WIN_Gift_Id);
        for (uint16 i = 0; i < _WIN_Gift_Id; i++) {
            ret[i] = Today_Win_Gift_address[i];
        }
        return ret;
    }

    function Today_Gift_Winner_Number() external view returns (uint16) {
        return _WIN_Gift_Id;
    }

    function User_All_Time_Left_Right(address User)
        public
        view
        returns (uint32, uint32)
    {
        return (_Users[User].All_Left, _Users[User].All_Right);
    }

    function User_All_Time_Point(address User) public view returns (uint32) {
        return
            _Users[User].All_Left <= _Users[User].All_Right
                ? _Users[User].All_Left
                : _Users[User].All_Right;
    }

    function User_Upline(address User) public view returns (address) {
        return _Users[User].UP;
    }

    function User_Directs(address User) public view returns (address, address) {
        return (_Users[User].Left_Address, _Users[User].Right_Address);
    }

    function User_Over(address User) public view returns (uint32, uint32) {
        return (_Users[User]._Left, _Users[User]._Right);
    }

    function User_All_Team(address User) public view returns (uint32) {
        return (_Users[User].All_Left + _Users[User].All_Right);
    }

    function User_Win_Gift(address User) public view returns (uint8) {
        return _Users[User].Won;
    }

    function User_Big_Side(address User) external view returns (uint32) {
        return
            _Users[User].All_Left >= _Users[User].All_Right
                ? _Users[User].All_Left
                : _Users[User].All_Right;
    }

    function User_Depth(address User) public view returns (uint24) {
        return _Users[User].depth;
    }

    function User_Info(address User) public view returns (Node memory) {
        return _Users[User];
    }

    function More_Than_Point(uint256 Number)
        public
        view
        returns (address[] memory)
    {
        address[] memory ret = new address[](_User_Id);
        for (uint32 i = 0; i <= _User_Id; i++) {
            uint32 min = User_All_Time_Point(All_User_Address[i]);
            if (min >= Number) {
                ret[i] = All_User_Address[i];
            }
        }
        return ret;
    }

    function More_Than_Big_Side(uint256 Number)
        public
        view
        returns (address[] memory)
    {
        address[] memory ret = new address[](_User_Id);
        for (uint32 i = 0; i <= _User_Id; i++) {
            uint32 max = Big_Side(All_User_Address[i]);
            if (max >= Number) {
                ret[i] = All_User_Address[i];
            }
        }
        return ret;
    }

    function More_Than_Win_Gift(uint256 Number)
        public
        view
        returns (address[] memory)
    {
        address[] memory ret = new address[](_User_Id);
        for (uint32 i = 0; i <= _User_Id; i++) {
            if (_Users[All_User_Address[i]].Won >= Number) {
                ret[i] = All_User_Address[i];
            }
        }
        return ret;
    }

    function Stable_Coin() external view returns (address) {
        return address(Tether);
    }

    function _SBT() external view returns (address) {
        return SBT;
    }

    function All_Gift_Winner() external view returns (uint256) {
        return _User_Id;
    }

    function All_Reward_Payment() external view returns (uint256) {
        return _User_Id * 90;
    }

    function Today_Reward_Click_Fee() external view returns (uint256) {
        return Reward_Click_Fee;
    }

    function Today_Contract_InPut() external view returns (uint256) {
        return (Register_Id * 100);
    }
    

}
